/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface NAIControllerStorageG1Interface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "comptroller()": FunctionFragment;
    "isNarwhalNAIInitialized()": FunctionFragment;
    "naiControllerImplementation()": FunctionFragment;
    "narwhalNAIMinterIndex(address)": FunctionFragment;
    "narwhalNAIState()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pendingNAIControllerImplementation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "comptroller"
      | "isNarwhalNAIInitialized"
      | "naiControllerImplementation"
      | "narwhalNAIMinterIndex"
      | "narwhalNAIState"
      | "pendingAdmin"
      | "pendingNAIControllerImplementation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNarwhalNAIInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "naiControllerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalNAIMinterIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalNAIState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingNAIControllerImplementation",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNarwhalNAIInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "naiControllerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalNAIMinterIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalNAIState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingNAIControllerImplementation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NAIControllerStorageG1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NAIControllerStorageG1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    naiControllerImplementation(overrides?: CallOverrides): Promise<[string]>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    narwhalNAIState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<boolean>;

  naiControllerImplementation(overrides?: CallOverrides): Promise<string>;

  narwhalNAIMinterIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  narwhalNAIState(
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingNAIControllerImplementation(
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<boolean>;

    naiControllerImplementation(overrides?: CallOverrides): Promise<string>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalNAIState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    naiControllerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalNAIState(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNarwhalNAIInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    naiControllerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalNAIState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
