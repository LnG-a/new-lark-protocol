/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface VRTConverterStorageInterface extends utils.Interface {
  functions: {
    "_notEntered()": FunctionFragment;
    "admin()": FunctionFragment;
    "conversionEndTime()": FunctionFragment;
    "conversionPeriod()": FunctionFragment;
    "conversionRatio()": FunctionFragment;
    "conversionStartTime()": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialized()": FunctionFragment;
    "nwl()": FunctionFragment;
    "nwlVesting()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pendingImplementation()": FunctionFragment;
    "totalVrtConverted()": FunctionFragment;
    "vrt()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_notEntered"
      | "admin"
      | "conversionEndTime"
      | "conversionPeriod"
      | "conversionRatio"
      | "conversionStartTime"
      | "implementation"
      | "initialized"
      | "nwl"
      | "nwlVesting"
      | "pendingAdmin"
      | "pendingImplementation"
      | "totalVrtConverted"
      | "vrt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_notEntered",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "conversionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conversionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conversionRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conversionStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nwl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nwlVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVrtConverted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vrt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_notEntered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nwl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nwlVesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVrtConverted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vrt", data: BytesLike): Result;

  events: {};
}

export interface VRTConverterStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VRTConverterStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _notEntered(overrides?: CallOverrides): Promise<[boolean]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    conversionEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    conversionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    conversionRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    conversionStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    nwl(overrides?: CallOverrides): Promise<[string]>;

    nwlVesting(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingImplementation(overrides?: CallOverrides): Promise<[string]>;

    totalVrtConverted(overrides?: CallOverrides): Promise<[BigNumber]>;

    vrt(overrides?: CallOverrides): Promise<[string]>;
  };

  _notEntered(overrides?: CallOverrides): Promise<boolean>;

  admin(overrides?: CallOverrides): Promise<string>;

  conversionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  conversionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  conversionRatio(overrides?: CallOverrides): Promise<BigNumber>;

  conversionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  nwl(overrides?: CallOverrides): Promise<string>;

  nwlVesting(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingImplementation(overrides?: CallOverrides): Promise<string>;

  totalVrtConverted(overrides?: CallOverrides): Promise<BigNumber>;

  vrt(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _notEntered(overrides?: CallOverrides): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    conversionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    conversionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    conversionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    conversionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    nwl(overrides?: CallOverrides): Promise<string>;

    nwlVesting(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingImplementation(overrides?: CallOverrides): Promise<string>;

    totalVrtConverted(overrides?: CallOverrides): Promise<BigNumber>;

    vrt(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _notEntered(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    conversionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    conversionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    conversionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    conversionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    nwl(overrides?: CallOverrides): Promise<BigNumber>;

    nwlVesting(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    totalVrtConverted(overrides?: CallOverrides): Promise<BigNumber>;

    vrt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _notEntered(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conversionEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conversionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conversionRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conversionStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nwl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nwlVesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVrtConverted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
