/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface PriceOracleProxyInterface extends utils.Interface {
  functions: {
    "daiOracleKey()": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "isPriceOracle()": FunctionFragment;
    "nBnbAddress()": FunctionFragment;
    "saiPrice()": FunctionFragment;
    "setSaiPrice(uint256)": FunctionFragment;
    "usdcOracleKey()": FunctionFragment;
    "v1PriceOracle()": FunctionFragment;
    "vDaiAddress()": FunctionFragment;
    "vSaiAddress()": FunctionFragment;
    "vUsdcAddress()": FunctionFragment;
    "vUsdtAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "daiOracleKey"
      | "getUnderlyingPrice"
      | "guardian"
      | "isPriceOracle"
      | "nBnbAddress"
      | "saiPrice"
      | "setSaiPrice"
      | "usdcOracleKey"
      | "v1PriceOracle"
      | "vDaiAddress"
      | "vSaiAddress"
      | "vUsdcAddress"
      | "vUsdtAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "daiOracleKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nBnbAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saiPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSaiPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "usdcOracleKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "v1PriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vDaiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vSaiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vUsdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vUsdtAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "daiOracleKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nBnbAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saiPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSaiPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcOracleKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v1PriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vDaiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vSaiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vUsdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vUsdtAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PriceOracleProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceOracleProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    daiOracleKey(overrides?: CallOverrides): Promise<[string]>;

    getUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    isPriceOracle(overrides?: CallOverrides): Promise<[boolean]>;

    nBnbAddress(overrides?: CallOverrides): Promise<[string]>;

    saiPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setSaiPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcOracleKey(overrides?: CallOverrides): Promise<[string]>;

    v1PriceOracle(overrides?: CallOverrides): Promise<[string]>;

    vDaiAddress(overrides?: CallOverrides): Promise<[string]>;

    vSaiAddress(overrides?: CallOverrides): Promise<[string]>;

    vUsdcAddress(overrides?: CallOverrides): Promise<[string]>;

    vUsdtAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  daiOracleKey(overrides?: CallOverrides): Promise<string>;

  getUnderlyingPrice(
    nToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  guardian(overrides?: CallOverrides): Promise<string>;

  isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

  nBnbAddress(overrides?: CallOverrides): Promise<string>;

  saiPrice(overrides?: CallOverrides): Promise<BigNumber>;

  setSaiPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcOracleKey(overrides?: CallOverrides): Promise<string>;

  v1PriceOracle(overrides?: CallOverrides): Promise<string>;

  vDaiAddress(overrides?: CallOverrides): Promise<string>;

  vSaiAddress(overrides?: CallOverrides): Promise<string>;

  vUsdcAddress(overrides?: CallOverrides): Promise<string>;

  vUsdtAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    daiOracleKey(overrides?: CallOverrides): Promise<string>;

    getUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<string>;

    isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

    nBnbAddress(overrides?: CallOverrides): Promise<string>;

    saiPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setSaiPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcOracleKey(overrides?: CallOverrides): Promise<string>;

    v1PriceOracle(overrides?: CallOverrides): Promise<string>;

    vDaiAddress(overrides?: CallOverrides): Promise<string>;

    vSaiAddress(overrides?: CallOverrides): Promise<string>;

    vUsdcAddress(overrides?: CallOverrides): Promise<string>;

    vUsdtAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    daiOracleKey(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    isPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    nBnbAddress(overrides?: CallOverrides): Promise<BigNumber>;

    saiPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setSaiPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcOracleKey(overrides?: CallOverrides): Promise<BigNumber>;

    v1PriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    vDaiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    vSaiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    vUsdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    vUsdtAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    daiOracleKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nBnbAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saiPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSaiPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcOracleKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v1PriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vDaiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vSaiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vUsdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vUsdtAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
