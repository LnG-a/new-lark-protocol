/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface NAIControllerInterface extends utils.Interface {
  functions: {
    "_become(address)": FunctionFragment;
    "_setComptroller(address)": FunctionFragment;
    "_setTreasuryData(address,address,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "comptroller()": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getMintableNAI(address)": FunctionFragment;
    "getNAIAddress()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isNarwhalNAIInitialized()": FunctionFragment;
    "liquidateNAI(address,uint256,address)": FunctionFragment;
    "mintNAI(uint256)": FunctionFragment;
    "naiControllerImplementation()": FunctionFragment;
    "narwhalInitialIndex()": FunctionFragment;
    "narwhalNAIMinterIndex(address)": FunctionFragment;
    "narwhalNAIState()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pendingNAIControllerImplementation()": FunctionFragment;
    "repayNAI(uint256)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "treasuryGuardian()": FunctionFragment;
    "treasuryPercent()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_become"
      | "_setComptroller"
      | "_setTreasuryData"
      | "admin"
      | "comptroller"
      | "getBlockNumber"
      | "getMintableNAI"
      | "getNAIAddress"
      | "initialize"
      | "isNarwhalNAIInitialized"
      | "liquidateNAI"
      | "mintNAI"
      | "naiControllerImplementation"
      | "narwhalInitialIndex"
      | "narwhalNAIMinterIndex"
      | "narwhalNAIState"
      | "pendingAdmin"
      | "pendingNAIControllerImplementation"
      | "repayNAI"
      | "treasuryAddress"
      | "treasuryGuardian"
      | "treasuryPercent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_become",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setComptroller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setTreasuryData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintableNAI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNAIAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNarwhalNAIInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateNAI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNAI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "naiControllerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalNAIMinterIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalNAIState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingNAIControllerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayNAI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryPercent",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_become", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setTreasuryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintableNAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNAIAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNarwhalNAIInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateNAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "naiControllerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalNAIMinterIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalNAIState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingNAIControllerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayNAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPercent",
    data: BytesLike
  ): Result;

  events: {
    "Failure(uint256,uint256,uint256)": EventFragment;
    "LiquidateNAI(address,address,uint256,address,uint256)": EventFragment;
    "MintFee(address,uint256)": EventFragment;
    "MintNAI(address,uint256)": EventFragment;
    "NewComptroller(address,address)": EventFragment;
    "NewTreasuryAddress(address,address)": EventFragment;
    "NewTreasuryGuardian(address,address)": EventFragment;
    "NewTreasuryPercent(uint256,uint256)": EventFragment;
    "RepayNAI(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Failure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateNAI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintNAI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewComptroller"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayNAI"): EventFragment;
}

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FailureEventObject
>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface LiquidateNAIEventObject {
  liquidator: string;
  borrower: string;
  repayAmount: BigNumber;
  nTokenCollateral: string;
  seizeTokens: BigNumber;
}
export type LiquidateNAIEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  LiquidateNAIEventObject
>;

export type LiquidateNAIEventFilter = TypedEventFilter<LiquidateNAIEvent>;

export interface MintFeeEventObject {
  minter: string;
  feeAmount: BigNumber;
}
export type MintFeeEvent = TypedEvent<[string, BigNumber], MintFeeEventObject>;

export type MintFeeEventFilter = TypedEventFilter<MintFeeEvent>;

export interface MintNAIEventObject {
  minter: string;
  mintNAIAmount: BigNumber;
}
export type MintNAIEvent = TypedEvent<[string, BigNumber], MintNAIEventObject>;

export type MintNAIEventFilter = TypedEventFilter<MintNAIEvent>;

export interface NewComptrollerEventObject {
  oldComptroller: string;
  newComptroller: string;
}
export type NewComptrollerEvent = TypedEvent<
  [string, string],
  NewComptrollerEventObject
>;

export type NewComptrollerEventFilter = TypedEventFilter<NewComptrollerEvent>;

export interface NewTreasuryAddressEventObject {
  oldTreasuryAddress: string;
  newTreasuryAddress: string;
}
export type NewTreasuryAddressEvent = TypedEvent<
  [string, string],
  NewTreasuryAddressEventObject
>;

export type NewTreasuryAddressEventFilter =
  TypedEventFilter<NewTreasuryAddressEvent>;

export interface NewTreasuryGuardianEventObject {
  oldTreasuryGuardian: string;
  newTreasuryGuardian: string;
}
export type NewTreasuryGuardianEvent = TypedEvent<
  [string, string],
  NewTreasuryGuardianEventObject
>;

export type NewTreasuryGuardianEventFilter =
  TypedEventFilter<NewTreasuryGuardianEvent>;

export interface NewTreasuryPercentEventObject {
  oldTreasuryPercent: BigNumber;
  newTreasuryPercent: BigNumber;
}
export type NewTreasuryPercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewTreasuryPercentEventObject
>;

export type NewTreasuryPercentEventFilter =
  TypedEventFilter<NewTreasuryPercentEvent>;

export interface RepayNAIEventObject {
  payer: string;
  borrower: string;
  repayNAIAmount: BigNumber;
}
export type RepayNAIEvent = TypedEvent<
  [string, string, BigNumber],
  RepayNAIEventObject
>;

export type RepayNAIEventFilter = TypedEventFilter<RepayNAIEvent>;

export interface NAIController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NAIControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setComptroller(
      comptroller_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNAIAddress(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNAI(
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    naiControllerImplementation(overrides?: CallOverrides): Promise<[string]>;

    narwhalInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    narwhalNAIState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    repayNAI(
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    treasuryGuardian(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercent(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _become(
    unitroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setComptroller(
    comptroller_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setTreasuryData(
    newTreasuryGuardian: PromiseOrValue<string>,
    newTreasuryAddress: PromiseOrValue<string>,
    newTreasuryPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getMintableNAI(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getNAIAddress(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<boolean>;

  liquidateNAI(
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    nTokenCollateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNAI(
    mintNAIAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  naiControllerImplementation(overrides?: CallOverrides): Promise<string>;

  narwhalInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  narwhalNAIMinterIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  narwhalNAIState(
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingNAIControllerImplementation(
    overrides?: CallOverrides
  ): Promise<string>;

  repayNAI(
    repayNAIAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  treasuryGuardian(overrides?: CallOverrides): Promise<string>;

  treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setComptroller(
      comptroller_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNAIAddress(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<boolean>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mintNAI(
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    naiControllerImplementation(overrides?: CallOverrides): Promise<string>;

    narwhalInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalNAIState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<string>;

    repayNAI(
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    treasuryGuardian(overrides?: CallOverrides): Promise<string>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Failure(uint256,uint256,uint256)"(
      error?: null,
      info?: null,
      detail?: null
    ): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    "LiquidateNAI(address,address,uint256,address,uint256)"(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      nTokenCollateral?: null,
      seizeTokens?: null
    ): LiquidateNAIEventFilter;
    LiquidateNAI(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      nTokenCollateral?: null,
      seizeTokens?: null
    ): LiquidateNAIEventFilter;

    "MintFee(address,uint256)"(
      minter?: null,
      feeAmount?: null
    ): MintFeeEventFilter;
    MintFee(minter?: null, feeAmount?: null): MintFeeEventFilter;

    "MintNAI(address,uint256)"(
      minter?: null,
      mintNAIAmount?: null
    ): MintNAIEventFilter;
    MintNAI(minter?: null, mintNAIAmount?: null): MintNAIEventFilter;

    "NewComptroller(address,address)"(
      oldComptroller?: null,
      newComptroller?: null
    ): NewComptrollerEventFilter;
    NewComptroller(
      oldComptroller?: null,
      newComptroller?: null
    ): NewComptrollerEventFilter;

    "NewTreasuryAddress(address,address)"(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null
    ): NewTreasuryAddressEventFilter;
    NewTreasuryAddress(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null
    ): NewTreasuryAddressEventFilter;

    "NewTreasuryGuardian(address,address)"(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null
    ): NewTreasuryGuardianEventFilter;
    NewTreasuryGuardian(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null
    ): NewTreasuryGuardianEventFilter;

    "NewTreasuryPercent(uint256,uint256)"(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null
    ): NewTreasuryPercentEventFilter;
    NewTreasuryPercent(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null
    ): NewTreasuryPercentEventFilter;

    "RepayNAI(address,address,uint256)"(
      payer?: null,
      borrower?: null,
      repayNAIAmount?: null
    ): RepayNAIEventFilter;
    RepayNAI(
      payer?: null,
      borrower?: null,
      repayNAIAmount?: null
    ): RepayNAIEventFilter;
  };

  estimateGas: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setComptroller(
      comptroller_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNAIAddress(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isNarwhalNAIInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNAI(
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    naiControllerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalNAIState(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayNAI(
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setComptroller(
      comptroller_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNAIAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isNarwhalNAIInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNAI(
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    naiControllerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalInitialIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalNAIMinterIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalNAIState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingNAIControllerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repayNAI(
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
