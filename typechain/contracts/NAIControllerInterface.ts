/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface NAIControllerInterfaceInterface extends utils.Interface {
  functions: {
    "_initializeNarwhalNAIState(uint256)": FunctionFragment;
    "calcDistributeNAIMinterNarwhal(address)": FunctionFragment;
    "getMintableNAI(address)": FunctionFragment;
    "getNAIAddress()": FunctionFragment;
    "liquidateNAI(address,uint256,address)": FunctionFragment;
    "mintNAI(address,uint256)": FunctionFragment;
    "repayNAI(address,uint256)": FunctionFragment;
    "updateNarwhalNAIMintIndex()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_initializeNarwhalNAIState"
      | "calcDistributeNAIMinterNarwhal"
      | "getMintableNAI"
      | "getNAIAddress"
      | "liquidateNAI"
      | "mintNAI"
      | "repayNAI"
      | "updateNarwhalNAIMintIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_initializeNarwhalNAIState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcDistributeNAIMinterNarwhal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintableNAI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNAIAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateNAI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNAI",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayNAI",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNarwhalNAIMintIndex",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_initializeNarwhalNAIState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDistributeNAIMinterNarwhal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintableNAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNAIAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateNAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayNAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNarwhalNAIMintIndex",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NAIControllerInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NAIControllerInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _initializeNarwhalNAIState(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcDistributeNAIMinterNarwhal(
      naiMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNAIAddress(overrides?: CallOverrides): Promise<[string]>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNAI(
      minter: PromiseOrValue<string>,
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayNAI(
      repayer: PromiseOrValue<string>,
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNarwhalNAIMintIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _initializeNarwhalNAIState(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcDistributeNAIMinterNarwhal(
    naiMinter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMintableNAI(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getNAIAddress(overrides?: CallOverrides): Promise<string>;

  liquidateNAI(
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    nTokenCollateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNAI(
    minter: PromiseOrValue<string>,
    mintNAIAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayNAI(
    repayer: PromiseOrValue<string>,
    repayNAIAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNarwhalNAIMintIndex(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _initializeNarwhalNAIState(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcDistributeNAIMinterNarwhal(
      naiMinter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNAIAddress(overrides?: CallOverrides): Promise<string>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mintNAI(
      minter: PromiseOrValue<string>,
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayNAI(
      repayer: PromiseOrValue<string>,
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateNarwhalNAIMintIndex(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _initializeNarwhalNAIState(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcDistributeNAIMinterNarwhal(
      naiMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNAIAddress(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNAI(
      minter: PromiseOrValue<string>,
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayNAI(
      repayer: PromiseOrValue<string>,
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNarwhalNAIMintIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _initializeNarwhalNAIState(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcDistributeNAIMinterNarwhal(
      naiMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMintableNAI(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNAIAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateNAI(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNAI(
      minter: PromiseOrValue<string>,
      mintNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayNAI(
      repayer: PromiseOrValue<string>,
      repayNAIAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNarwhalNAIMintIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
