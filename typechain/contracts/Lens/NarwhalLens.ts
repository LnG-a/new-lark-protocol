/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace NarwhalLens {
  export type AccountLimitsStruct = {
    markets: PromiseOrValue<string>[];
    liquidity: PromiseOrValue<BigNumberish>;
    shortfall: PromiseOrValue<BigNumberish>;
  };

  export type AccountLimitsStructOutput = [string[], BigNumber, BigNumber] & {
    markets: string[];
    liquidity: BigNumber;
    shortfall: BigNumber;
  };

  export type GovProposalStruct = {
    proposalId: PromiseOrValue<BigNumberish>;
    proposer: PromiseOrValue<string>;
    eta: PromiseOrValue<BigNumberish>;
    targets: PromiseOrValue<string>[];
    values: PromiseOrValue<BigNumberish>[];
    signatures: PromiseOrValue<string>[];
    calldatas: PromiseOrValue<BytesLike>[];
    startBlock: PromiseOrValue<BigNumberish>;
    endBlock: PromiseOrValue<BigNumberish>;
    forVotes: PromiseOrValue<BigNumberish>;
    againstVotes: PromiseOrValue<BigNumberish>;
    canceled: PromiseOrValue<boolean>;
    executed: PromiseOrValue<boolean>;
  };

  export type GovProposalStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string[],
    BigNumber[],
    string[],
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    proposalId: BigNumber;
    proposer: string;
    eta: BigNumber;
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
  };

  export type GovReceiptStruct = {
    proposalId: PromiseOrValue<BigNumberish>;
    hasVoted: PromiseOrValue<boolean>;
    support: PromiseOrValue<boolean>;
    votes: PromiseOrValue<BigNumberish>;
  };

  export type GovReceiptStructOutput = [
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    proposalId: BigNumber;
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
  };

  export type NWLBalanceMetadataStruct = {
    balance: PromiseOrValue<BigNumberish>;
    votes: PromiseOrValue<BigNumberish>;
    delegate: PromiseOrValue<string>;
  };

  export type NWLBalanceMetadataStructOutput = [
    BigNumber,
    BigNumber,
    string
  ] & { balance: BigNumber; votes: BigNumber; delegate: string };

  export type NWLBalanceMetadataExtStruct = {
    balance: PromiseOrValue<BigNumberish>;
    votes: PromiseOrValue<BigNumberish>;
    delegate: PromiseOrValue<string>;
    allocated: PromiseOrValue<BigNumberish>;
  };

  export type NWLBalanceMetadataExtStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    balance: BigNumber;
    votes: BigNumber;
    delegate: string;
    allocated: BigNumber;
  };

  export type NarwhalVotesStruct = {
    blockNumber: PromiseOrValue<BigNumberish>;
    votes: PromiseOrValue<BigNumberish>;
  };

  export type NarwhalVotesStructOutput = [BigNumber, BigNumber] & {
    blockNumber: BigNumber;
    votes: BigNumber;
  };

  export type NTokenBalancesStruct = {
    nToken: PromiseOrValue<string>;
    balanceOf: PromiseOrValue<BigNumberish>;
    borrowBalanceCurrent: PromiseOrValue<BigNumberish>;
    balanceOfUnderlying: PromiseOrValue<BigNumberish>;
    tokenBalance: PromiseOrValue<BigNumberish>;
    tokenAllowance: PromiseOrValue<BigNumberish>;
  };

  export type NTokenBalancesStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    nToken: string;
    balanceOf: BigNumber;
    borrowBalanceCurrent: BigNumber;
    balanceOfUnderlying: BigNumber;
    tokenBalance: BigNumber;
    tokenAllowance: BigNumber;
  };

  export type NTokenLiquidateMetadataStruct = {
    NToken: PromiseOrValue<string>;
    balanceOf: PromiseOrValue<BigNumberish>;
    borrowBalanceCurrent: PromiseOrValue<BigNumberish>;
    balanceOfUnderlying: PromiseOrValue<BigNumberish>;
    sourcePrice: PromiseOrValue<BigNumberish>;
    collateralFactorMantissa: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<boolean>;
  };

  export type NTokenLiquidateMetadataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    NToken: string;
    balanceOf: BigNumber;
    borrowBalanceCurrent: BigNumber;
    balanceOfUnderlying: BigNumber;
    sourcePrice: BigNumber;
    collateralFactorMantissa: BigNumber;
    collateral: boolean;
  };

  export type NTokenMetadataStruct = {
    nToken: PromiseOrValue<string>;
    exchangeRateCurrent: PromiseOrValue<BigNumberish>;
    supplyRatePerBlock: PromiseOrValue<BigNumberish>;
    borrowRatePerBlock: PromiseOrValue<BigNumberish>;
    reserveFactorMantissa: PromiseOrValue<BigNumberish>;
    totalBorrows: PromiseOrValue<BigNumberish>;
    totalReserves: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    totalCash: PromiseOrValue<BigNumberish>;
    isListed: PromiseOrValue<boolean>;
    collateralFactorMantissa: PromiseOrValue<BigNumberish>;
    underlyingAssetAddress: PromiseOrValue<string>;
    nTokenDecimals: PromiseOrValue<BigNumberish>;
    underlyingDecimals: PromiseOrValue<BigNumberish>;
    narwhalSupplySpeed: PromiseOrValue<BigNumberish>;
    narwhalBorrowSpeed: PromiseOrValue<BigNumberish>;
    dailySupplyNwl: PromiseOrValue<BigNumberish>;
    dailyBorrowNwl: PromiseOrValue<BigNumberish>;
  };

  export type NTokenMetadataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    nToken: string;
    exchangeRateCurrent: BigNumber;
    supplyRatePerBlock: BigNumber;
    borrowRatePerBlock: BigNumber;
    reserveFactorMantissa: BigNumber;
    totalBorrows: BigNumber;
    totalReserves: BigNumber;
    totalSupply: BigNumber;
    totalCash: BigNumber;
    isListed: boolean;
    collateralFactorMantissa: BigNumber;
    underlyingAssetAddress: string;
    nTokenDecimals: BigNumber;
    underlyingDecimals: BigNumber;
    narwhalSupplySpeed: BigNumber;
    narwhalBorrowSpeed: BigNumber;
    dailySupplyNwl: BigNumber;
    dailyBorrowNwl: BigNumber;
  };

  export type NTokenUnderlyingPriceStruct = {
    nToken: PromiseOrValue<string>;
    underlyingPrice: PromiseOrValue<BigNumberish>;
  };

  export type NTokenUnderlyingPriceStructOutput = [string, BigNumber] & {
    nToken: string;
    underlyingPrice: BigNumber;
  };
}

export interface NarwhalLensInterface extends utils.Interface {
  functions: {
    "BLOCKS_PER_DAY()": FunctionFragment;
    "getAccountLimits(address,address)": FunctionFragment;
    "getDailyNWL(address,address)": FunctionFragment;
    "getGovProposals(address,uint256[])": FunctionFragment;
    "getGovReceipts(address,address,uint256[])": FunctionFragment;
    "getNWLBalanceMetadata(address,address)": FunctionFragment;
    "getNWLBalanceMetadataExt(address,address,address)": FunctionFragment;
    "getNarwhalVotes(address,address,uint32[])": FunctionFragment;
    "nTokenBalances(address,address)": FunctionFragment;
    "nTokenBalancesAll(address[],address)": FunctionFragment;
    "nTokenLiquidateMetadata(address,address)": FunctionFragment;
    "nTokenLiquidateMetadataAll(address[],address)": FunctionFragment;
    "nTokenMetadata(address)": FunctionFragment;
    "nTokenMetadataAll(address[])": FunctionFragment;
    "nTokenUnderlyingPrice(address)": FunctionFragment;
    "nTokenUnderlyingPriceAll(address[])": FunctionFragment;
    "pendingNarwhal(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLOCKS_PER_DAY"
      | "getAccountLimits"
      | "getDailyNWL"
      | "getGovProposals"
      | "getGovReceipts"
      | "getNWLBalanceMetadata"
      | "getNWLBalanceMetadataExt"
      | "getNarwhalVotes"
      | "nTokenBalances"
      | "nTokenBalancesAll"
      | "nTokenLiquidateMetadata"
      | "nTokenLiquidateMetadataAll"
      | "nTokenMetadata"
      | "nTokenMetadataAll"
      | "nTokenUnderlyingPrice"
      | "nTokenUnderlyingPriceAll"
      | "pendingNarwhal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BLOCKS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLimits",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDailyNWL",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovReceipts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNWLBalanceMetadata",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNWLBalanceMetadataExt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNarwhalVotes",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenBalancesAll",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenLiquidateMetadata",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenLiquidateMetadataAll",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenMetadata",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenMetadataAll",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nTokenUnderlyingPriceAll",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingNarwhal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCKS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailyNWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNWLBalanceMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNWLBalanceMetadataExt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNarwhalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenBalancesAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenLiquidateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenLiquidateMetadataAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenMetadataAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nTokenUnderlyingPriceAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingNarwhal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NarwhalLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NarwhalLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountLimits(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NarwhalLens.AccountLimitsStructOutput]>;

    getDailyNWL(
      account: PromiseOrValue<string>,
      comptrollerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGovProposals(
      governor: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[NarwhalLens.GovProposalStructOutput[]]>;

    getGovReceipts(
      governor: PromiseOrValue<string>,
      voter: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[NarwhalLens.GovReceiptStructOutput[]]>;

    getNWLBalanceMetadata(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NarwhalLens.NWLBalanceMetadataStructOutput]>;

    getNWLBalanceMetadataExt(
      nwl: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNarwhalVotes(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      blockNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[NarwhalLens.NarwhalVotesStructOutput[]]>;

    nTokenBalances(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nTokenBalancesAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nTokenLiquidateMetadata(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nTokenLiquidateMetadataAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nTokenMetadata(
      nToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nTokenMetadataAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nTokenUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NarwhalLens.NTokenUnderlyingPriceStructOutput]>;

    nTokenUnderlyingPriceAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[NarwhalLens.NTokenUnderlyingPriceStructOutput[]]>;

    pendingNarwhal(
      holder: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountLimits(
    comptroller: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NarwhalLens.AccountLimitsStructOutput>;

  getDailyNWL(
    account: PromiseOrValue<string>,
    comptrollerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGovProposals(
    governor: PromiseOrValue<string>,
    proposalIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<NarwhalLens.GovProposalStructOutput[]>;

  getGovReceipts(
    governor: PromiseOrValue<string>,
    voter: PromiseOrValue<string>,
    proposalIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<NarwhalLens.GovReceiptStructOutput[]>;

  getNWLBalanceMetadata(
    nwl: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NarwhalLens.NWLBalanceMetadataStructOutput>;

  getNWLBalanceMetadataExt(
    nwl: PromiseOrValue<string>,
    comptroller: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNarwhalVotes(
    nwl: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    blockNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<NarwhalLens.NarwhalVotesStructOutput[]>;

  nTokenBalances(
    nToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nTokenBalancesAll(
    nTokens: PromiseOrValue<string>[],
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nTokenLiquidateMetadata(
    nToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nTokenLiquidateMetadataAll(
    nTokens: PromiseOrValue<string>[],
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nTokenMetadata(
    nToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nTokenMetadataAll(
    nTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nTokenUnderlyingPrice(
    nToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NarwhalLens.NTokenUnderlyingPriceStructOutput>;

  nTokenUnderlyingPriceAll(
    nTokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<NarwhalLens.NTokenUnderlyingPriceStructOutput[]>;

  pendingNarwhal(
    holder: PromiseOrValue<string>,
    comptroller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLimits(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.AccountLimitsStructOutput>;

    getDailyNWL(
      account: PromiseOrValue<string>,
      comptrollerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovProposals(
      governor: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<NarwhalLens.GovProposalStructOutput[]>;

    getGovReceipts(
      governor: PromiseOrValue<string>,
      voter: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<NarwhalLens.GovReceiptStructOutput[]>;

    getNWLBalanceMetadata(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NWLBalanceMetadataStructOutput>;

    getNWLBalanceMetadataExt(
      nwl: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NWLBalanceMetadataExtStructOutput>;

    getNarwhalVotes(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      blockNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NarwhalVotesStructOutput[]>;

    nTokenBalances(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenBalancesStructOutput>;

    nTokenBalancesAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenBalancesStructOutput[]>;

    nTokenLiquidateMetadata(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenLiquidateMetadataStructOutput>;

    nTokenLiquidateMetadataAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenLiquidateMetadataStructOutput[]>;

    nTokenMetadata(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenMetadataStructOutput>;

    nTokenMetadataAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenMetadataStructOutput[]>;

    nTokenUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenUnderlyingPriceStructOutput>;

    nTokenUnderlyingPriceAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<NarwhalLens.NTokenUnderlyingPriceStructOutput[]>;

    pendingNarwhal(
      holder: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLimits(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDailyNWL(
      account: PromiseOrValue<string>,
      comptrollerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGovProposals(
      governor: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovReceipts(
      governor: PromiseOrValue<string>,
      voter: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNWLBalanceMetadata(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNWLBalanceMetadataExt(
      nwl: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNarwhalVotes(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      blockNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nTokenBalances(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nTokenBalancesAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nTokenLiquidateMetadata(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nTokenLiquidateMetadataAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nTokenMetadata(
      nToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nTokenMetadataAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nTokenUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nTokenUnderlyingPriceAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingNarwhal(
      holder: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCKS_PER_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountLimits(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDailyNWL(
      account: PromiseOrValue<string>,
      comptrollerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGovProposals(
      governor: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovReceipts(
      governor: PromiseOrValue<string>,
      voter: PromiseOrValue<string>,
      proposalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNWLBalanceMetadata(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNWLBalanceMetadataExt(
      nwl: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNarwhalVotes(
      nwl: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      blockNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nTokenBalances(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nTokenBalancesAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nTokenLiquidateMetadata(
      nToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nTokenLiquidateMetadataAll(
      nTokens: PromiseOrValue<string>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nTokenMetadata(
      nToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nTokenMetadataAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nTokenUnderlyingPrice(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nTokenUnderlyingPriceAll(
      nTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingNarwhal(
      holder: PromiseOrValue<string>,
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
