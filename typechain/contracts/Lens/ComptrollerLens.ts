/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ComptrollerLensInterface extends utils.Interface {
  functions: {
    "getHypotheticalAccountLiquidity(address,address,address,uint256,uint256)": FunctionFragment;
    "liquidateCalculateSeizeTokens(address,address,address,uint256)": FunctionFragment;
    "liquidateNAICalculateSeizeTokens(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getHypotheticalAccountLiquidity"
      | "liquidateCalculateSeizeTokens"
      | "liquidateNAICalculateSeizeTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCalculateSeizeTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateNAICalculateSeizeTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateNAICalculateSeizeTokens",
    data: BytesLike
  ): Result;

  events: {
    "Failure(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Failure"): EventFragment;
}

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FailureEventObject
>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface ComptrollerLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ComptrollerLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getHypotheticalAccountLiquidity(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    liquidateCalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidateNAICalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  getHypotheticalAccountLiquidity(
    comptroller: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    nTokenModify: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  liquidateCalculateSeizeTokens(
    comptroller: PromiseOrValue<string>,
    nTokenBorrowed: PromiseOrValue<string>,
    nTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  liquidateNAICalculateSeizeTokens(
    comptroller: PromiseOrValue<string>,
    nTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    getHypotheticalAccountLiquidity(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    liquidateCalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidateNAICalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    "Failure(uint256,uint256,uint256)"(
      error?: null,
      info?: null,
      detail?: null
    ): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;
  };

  estimateGas: {
    getHypotheticalAccountLiquidity(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateNAICalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getHypotheticalAccountLiquidity(
      comptroller: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateNAICalculateSeizeTokens(
      comptroller: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
