/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface LiquidatorInterface extends utils.Interface {
  functions: {
    "_acceptAdmin()": FunctionFragment;
    "_notEntered()": FunctionFragment;
    "_setPendingAdmin(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "liquidateBorrow(address,address,uint256,address)": FunctionFragment;
    "nBnb()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "setTreasuryPercent(uint256)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryPercentMantissa()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_acceptAdmin"
      | "_notEntered"
      | "_setPendingAdmin"
      | "admin"
      | "liquidateBorrow"
      | "nBnb"
      | "pendingAdmin"
      | "setTreasuryPercent"
      | "treasury"
      | "treasuryPercentMantissa"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_notEntered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "nBnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryPercentMantissa",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_notEntered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nBnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPercentMantissa",
    data: BytesLike
  ): Result;

  events: {
    "LiquidateBorrowedTokens(address,address,uint256,address,uint256,uint256)": EventFragment;
    "NewAdmin(address,address)": EventFragment;
    "NewLiquidationTreasuryPercent(uint256,uint256)": EventFragment;
    "NewPendingAdmin(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidateBorrowedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewLiquidationTreasuryPercent"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingAdmin"): EventFragment;
}

export interface LiquidateBorrowedTokensEventObject {
  liquidator: string;
  borrower: string;
  repayAmount: BigNumber;
  nTokenCollateral: string;
  seizeTokensForTreasury: BigNumber;
  seizeTokensForLiquidator: BigNumber;
}
export type LiquidateBorrowedTokensEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  LiquidateBorrowedTokensEventObject
>;

export type LiquidateBorrowedTokensEventFilter =
  TypedEventFilter<LiquidateBorrowedTokensEvent>;

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewLiquidationTreasuryPercentEventObject {
  oldPercent: BigNumber;
  newPercent: BigNumber;
}
export type NewLiquidationTreasuryPercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewLiquidationTreasuryPercentEventObject
>;

export type NewLiquidationTreasuryPercentEventFilter =
  TypedEventFilter<NewLiquidationTreasuryPercentEvent>;

export interface NewPendingAdminEventObject {
  oldPendingAdmin: string;
  newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<
  [string, string],
  NewPendingAdminEventObject
>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface Liquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _notEntered(overrides?: CallOverrides): Promise<[boolean]>;

    _setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    liquidateBorrow(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nBnb(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    setTreasuryPercent(
      newTreasuryPercentMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercentMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _acceptAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _notEntered(overrides?: CallOverrides): Promise<boolean>;

  _setPendingAdmin(
    newPendingAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  liquidateBorrow(
    nToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    nTokenCollateral: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nBnb(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  setTreasuryPercent(
    newTreasuryPercentMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryPercentMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _acceptAdmin(overrides?: CallOverrides): Promise<void>;

    _notEntered(overrides?: CallOverrides): Promise<boolean>;

    _setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    liquidateBorrow(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nBnb(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    setTreasuryPercent(
      newTreasuryPercentMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryPercentMantissa(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LiquidateBorrowedTokens(address,address,uint256,address,uint256,uint256)"(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      nTokenCollateral?: null,
      seizeTokensForTreasury?: null,
      seizeTokensForLiquidator?: null
    ): LiquidateBorrowedTokensEventFilter;
    LiquidateBorrowedTokens(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      nTokenCollateral?: null,
      seizeTokensForTreasury?: null,
      seizeTokensForLiquidator?: null
    ): LiquidateBorrowedTokensEventFilter;

    "NewAdmin(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;

    "NewLiquidationTreasuryPercent(uint256,uint256)"(
      oldPercent?: null,
      newPercent?: null
    ): NewLiquidationTreasuryPercentEventFilter;
    NewLiquidationTreasuryPercent(
      oldPercent?: null,
      newPercent?: null
    ): NewLiquidationTreasuryPercentEventFilter;

    "NewPendingAdmin(address,address)"(
      oldPendingAdmin?: null,
      newPendingAdmin?: null
    ): NewPendingAdminEventFilter;
    NewPendingAdmin(
      oldPendingAdmin?: null,
      newPendingAdmin?: null
    ): NewPendingAdminEventFilter;
  };

  estimateGas: {
    _acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _notEntered(overrides?: CallOverrides): Promise<BigNumber>;

    _setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrow(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nBnb(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    setTreasuryPercent(
      newTreasuryPercentMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercentMantissa(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _notEntered(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrow(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      nTokenCollateral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nBnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTreasuryPercent(
      newTreasuryPercentMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPercentMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
