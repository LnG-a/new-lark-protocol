/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace NWLVaultStorageV1 {
  export type WithdrawalRequestStruct = {
    amount: PromiseOrValue<BigNumberish>;
    lockedUntil: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawalRequestStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    lockedUntil: BigNumber;
  };
}

export interface NWLVaultInterface extends utils.Interface {
  functions: {
    "DELEGATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "_become(address)": FunctionFragment;
    "add(address,uint256,address,uint256,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "burnAdmin()": FunctionFragment;
    "checkpoints(address,uint32)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "deposit(address,uint256,uint256)": FunctionFragment;
    "executeWithdrawal(address,uint256)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getCurrentVotes(address)": FunctionFragment;
    "getEligibleWithdrawalAmount(address,uint256,address)": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "getRequestedAmount(address,uint256,address)": FunctionFragment;
    "getUserInfo(address,uint256,address)": FunctionFragment;
    "getWithdrawalRequests(address,uint256,address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "massUpdatePools(address)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numCheckpoints(address)": FunctionFragment;
    "nwlAddress()": FunctionFragment;
    "nwlStore()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pendingNWLVaultImplementation()": FunctionFragment;
    "pendingReward(address,uint256,address)": FunctionFragment;
    "poolInfos(address,uint256)": FunctionFragment;
    "poolLength(address)": FunctionFragment;
    "requestWithdrawal(address,uint256,uint256)": FunctionFragment;
    "rewardTokenAmountsPerBlock(address)": FunctionFragment;
    "set(address,uint256,uint256)": FunctionFragment;
    "setNwlStore(address,address)": FunctionFragment;
    "setRewardAmountPerBlock(address,uint256)": FunctionFragment;
    "setWithdrawalLockingPeriod(address,uint256,uint256)": FunctionFragment;
    "totalAllocPoints(address)": FunctionFragment;
    "updatePool(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DELEGATION_TYPEHASH"
      | "DOMAIN_TYPEHASH"
      | "_become"
      | "add"
      | "admin"
      | "burnAdmin"
      | "checkpoints"
      | "delegate"
      | "delegateBySig"
      | "delegates"
      | "deposit"
      | "executeWithdrawal"
      | "getAdmin"
      | "getCurrentVotes"
      | "getEligibleWithdrawalAmount"
      | "getPriorVotes"
      | "getRequestedAmount"
      | "getUserInfo"
      | "getWithdrawalRequests"
      | "implementation"
      | "massUpdatePools"
      | "nonces"
      | "numCheckpoints"
      | "nwlAddress"
      | "nwlStore"
      | "pendingAdmin"
      | "pendingNWLVaultImplementation"
      | "pendingReward"
      | "poolInfos"
      | "poolLength"
      | "requestWithdrawal"
      | "rewardTokenAmountsPerBlock"
      | "set"
      | "setNwlStore"
      | "setRewardAmountPerBlock"
      | "setWithdrawalLockingPeriod"
      | "totalAllocPoints"
      | "updatePool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_become",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "burnAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleWithdrawalAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestedAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalRequests",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nwlAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nwlStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingNWLVaultImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfos",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenAmountsPerBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNwlStore",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardAmountPerBlock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalLockingPeriod",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_become", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nwlAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nwlStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingNWLVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenAmountsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNwlStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardAmountPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;

  events: {
    "AdminTransferred(address,address)": EventFragment;
    "DelegateChangedV2(address,address,address)": EventFragment;
    "DelegateVotesChangedV2(address,uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "ExecutedWithdrawal(address,address,uint256,uint256)": EventFragment;
    "PoolAdded(address,uint256,address,uint256,uint256,uint256)": EventFragment;
    "PoolUpdated(address,uint256,uint256,uint256)": EventFragment;
    "ReqestedWithdrawal(address,address,uint256,uint256)": EventFragment;
    "RewardAmountUpdated(address,uint256,uint256)": EventFragment;
    "StoreUpdated(address,address,address,address)": EventFragment;
    "WithdrawalLockingPeriodUpdated(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChangedV2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChangedV2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReqestedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawalLockingPeriodUpdated"
  ): EventFragment;
}

export interface AdminTransferredEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type AdminTransferredEvent = TypedEvent<
  [string, string],
  AdminTransferredEventObject
>;

export type AdminTransferredEventFilter =
  TypedEventFilter<AdminTransferredEvent>;

export interface DelegateChangedV2EventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedV2Event = TypedEvent<
  [string, string, string],
  DelegateChangedV2EventObject
>;

export type DelegateChangedV2EventFilter =
  TypedEventFilter<DelegateChangedV2Event>;

export interface DelegateVotesChangedV2EventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedV2Event = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateVotesChangedV2EventObject
>;

export type DelegateVotesChangedV2EventFilter =
  TypedEventFilter<DelegateVotesChangedV2Event>;

export interface DepositEventObject {
  user: string;
  rewardToken: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface ExecutedWithdrawalEventObject {
  user: string;
  rewardToken: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type ExecutedWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ExecutedWithdrawalEventObject
>;

export type ExecutedWithdrawalEventFilter =
  TypedEventFilter<ExecutedWithdrawalEvent>;

export interface PoolAddedEventObject {
  rewardToken: string;
  pid: BigNumber;
  token: string;
  allocPoints: BigNumber;
  rewardPerBlock: BigNumber;
  lockPeriod: BigNumber;
}
export type PoolAddedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  PoolAddedEventObject
>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface PoolUpdatedEventObject {
  rewardToken: string;
  pid: BigNumber;
  oldAllocPoints: BigNumber;
  newAllocPoints: BigNumber;
}
export type PoolUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PoolUpdatedEventObject
>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface ReqestedWithdrawalEventObject {
  user: string;
  rewardToken: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type ReqestedWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ReqestedWithdrawalEventObject
>;

export type ReqestedWithdrawalEventFilter =
  TypedEventFilter<ReqestedWithdrawalEvent>;

export interface RewardAmountUpdatedEventObject {
  rewardToken: string;
  oldReward: BigNumber;
  newReward: BigNumber;
}
export type RewardAmountUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardAmountUpdatedEventObject
>;

export type RewardAmountUpdatedEventFilter =
  TypedEventFilter<RewardAmountUpdatedEvent>;

export interface StoreUpdatedEventObject {
  oldNwl: string;
  oldStore: string;
  newNwl: string;
  newStore: string;
}
export type StoreUpdatedEvent = TypedEvent<
  [string, string, string, string],
  StoreUpdatedEventObject
>;

export type StoreUpdatedEventFilter = TypedEventFilter<StoreUpdatedEvent>;

export interface WithdrawalLockingPeriodUpdatedEventObject {
  rewardToken: string;
  pid: BigNumber;
  oldPeriod: BigNumber;
  newPeriod: BigNumber;
}
export type WithdrawalLockingPeriodUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawalLockingPeriodUpdatedEventObject
>;

export type WithdrawalLockingPeriodUpdatedEventFilter =
  TypedEventFilter<WithdrawalLockingPeriodUpdatedEvent>;

export interface NWLVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NWLVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    _become(
      nwlVaultProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add(
      _rewardToken: PromiseOrValue<string>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    burnAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deposit(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    getCurrentVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEligibleWithdrawalAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawalAmount: BigNumber }>;

    getPriorVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestedAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserInfo(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        pendingWithdrawals: BigNumber;
      }
    >;

    getWithdrawalRequests(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NWLVaultStorageV1.WithdrawalRequestStructOutput[]]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    massUpdatePools(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    nwlAddress(overrides?: CallOverrides): Promise<[string]>;

    nwlStore(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingNWLVaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lockPeriod: BigNumber;
      }
    >;

    poolLength(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardTokenAmountsPerBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    set(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNwlStore(
      _nwl: PromiseOrValue<string>,
      _nwlStore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardAmountPerBlock(
      _rewardToken: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalLockingPeriod(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAllocPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updatePool(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  _become(
    nwlVaultProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add(
    _rewardToken: PromiseOrValue<string>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _rewardPerBlock: PromiseOrValue<BigNumberish>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  burnAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkpoints(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  delegate(
    delegatee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegates(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  deposit(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeWithdrawal(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getCurrentVotes(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEligibleWithdrawalAmount(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriorVotes(
    account: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestedAmount(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserInfo(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      pendingWithdrawals: BigNumber;
    }
  >;

  getWithdrawalRequests(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NWLVaultStorageV1.WithdrawalRequestStructOutput[]>;

  implementation(overrides?: CallOverrides): Promise<string>;

  massUpdatePools(
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numCheckpoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  nwlAddress(overrides?: CallOverrides): Promise<string>;

  nwlStore(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingNWLVaultImplementation(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfos(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
      lockPeriod: BigNumber;
    }
  >;

  poolLength(
    rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestWithdrawal(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardTokenAmountsPerBlock(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  set(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNwlStore(
    _nwl: PromiseOrValue<string>,
    _nwlStore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardAmountPerBlock(
    _rewardToken: PromiseOrValue<string>,
    _rewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalLockingPeriod(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    _newPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAllocPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updatePool(
    _rewardToken: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    _become(
      nwlVaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    add(
      _rewardToken: PromiseOrValue<string>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    burnAdmin(overrides?: CallOverrides): Promise<void>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getCurrentVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEligibleWithdrawalAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestedAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        pendingWithdrawals: BigNumber;
      }
    >;

    getWithdrawalRequests(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NWLVaultStorageV1.WithdrawalRequestStructOutput[]>;

    implementation(overrides?: CallOverrides): Promise<string>;

    massUpdatePools(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    nwlAddress(overrides?: CallOverrides): Promise<string>;

    nwlStore(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingNWLVaultImplementation(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lockPeriod: BigNumber;
      }
    >;

    poolLength(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTokenAmountsPerBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNwlStore(
      _nwl: PromiseOrValue<string>,
      _nwlStore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardAmountPerBlock(
      _rewardToken: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalLockingPeriod(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllocPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePool(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminTransferred(address,address)"(
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null
    ): AdminTransferredEventFilter;
    AdminTransferred(
      oldAdmin?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null
    ): AdminTransferredEventFilter;

    "DelegateChangedV2(address,address,address)"(
      delegator?: PromiseOrValue<string> | null,
      fromDelegate?: PromiseOrValue<string> | null,
      toDelegate?: PromiseOrValue<string> | null
    ): DelegateChangedV2EventFilter;
    DelegateChangedV2(
      delegator?: PromiseOrValue<string> | null,
      fromDelegate?: PromiseOrValue<string> | null,
      toDelegate?: PromiseOrValue<string> | null
    ): DelegateChangedV2EventFilter;

    "DelegateVotesChangedV2(address,uint256,uint256)"(
      delegate?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedV2EventFilter;
    DelegateVotesChangedV2(
      delegate?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedV2EventFilter;

    "Deposit(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;

    "ExecutedWithdrawal(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ExecutedWithdrawalEventFilter;
    ExecutedWithdrawal(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ExecutedWithdrawalEventFilter;

    "PoolAdded(address,uint256,address,uint256,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      allocPoints?: null,
      rewardPerBlock?: null,
      lockPeriod?: null
    ): PoolAddedEventFilter;
    PoolAdded(
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      allocPoints?: null,
      rewardPerBlock?: null,
      lockPeriod?: null
    ): PoolAddedEventFilter;

    "PoolUpdated(address,uint256,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      oldAllocPoints?: null,
      newAllocPoints?: null
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      oldAllocPoints?: null,
      newAllocPoints?: null
    ): PoolUpdatedEventFilter;

    "ReqestedWithdrawal(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ReqestedWithdrawalEventFilter;
    ReqestedWithdrawal(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ReqestedWithdrawalEventFilter;

    "RewardAmountUpdated(address,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      oldReward?: null,
      newReward?: null
    ): RewardAmountUpdatedEventFilter;
    RewardAmountUpdated(
      rewardToken?: PromiseOrValue<string> | null,
      oldReward?: null,
      newReward?: null
    ): RewardAmountUpdatedEventFilter;

    "StoreUpdated(address,address,address,address)"(
      oldNwl?: null,
      oldStore?: null,
      newNwl?: null,
      newStore?: null
    ): StoreUpdatedEventFilter;
    StoreUpdated(
      oldNwl?: null,
      oldStore?: null,
      newNwl?: null,
      newStore?: null
    ): StoreUpdatedEventFilter;

    "WithdrawalLockingPeriodUpdated(address,uint256,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      oldPeriod?: null,
      newPeriod?: null
    ): WithdrawalLockingPeriodUpdatedEventFilter;
    WithdrawalLockingPeriodUpdated(
      rewardToken?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      oldPeriod?: null,
      newPeriod?: null
    ): WithdrawalLockingPeriodUpdatedEventFilter;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    _become(
      nwlVaultProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add(
      _rewardToken: PromiseOrValue<string>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    burnAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEligibleWithdrawalAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestedAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalRequests(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nwlAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nwlStore(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingNWLVaultImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReward(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardTokenAmountsPerBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNwlStore(
      _nwl: PromiseOrValue<string>,
      _nwlStore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardAmountPerBlock(
      _rewardToken: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalLockingPeriod(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAllocPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePool(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _become(
      nwlVaultProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add(
      _rewardToken: PromiseOrValue<string>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEligibleWithdrawalAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestedAmount(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalRequests(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nwlAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nwlStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingNWLVaultImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingReward(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokenAmountsPerBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNwlStore(
      _nwl: PromiseOrValue<string>,
      _nwlStore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardAmountPerBlock(
      _rewardToken: PromiseOrValue<string>,
      _rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalLockingPeriod(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAllocPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _rewardToken: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
