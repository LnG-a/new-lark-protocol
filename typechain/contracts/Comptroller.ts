/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ComptrollerInterface extends utils.Interface {
  functions: {
    "_become(address)": FunctionFragment;
    "_grantNWL(address,uint256)": FunctionFragment;
    "_setAccessControl(address)": FunctionFragment;
    "_setActionsPaused(address[],uint8[],bool)": FunctionFragment;
    "_setCloseFactor(uint256)": FunctionFragment;
    "_setCollateralFactor(address,uint256)": FunctionFragment;
    "_setComptrollerLens(address)": FunctionFragment;
    "_setLiquidationIncentive(uint256)": FunctionFragment;
    "_setLiquidatorContract(address)": FunctionFragment;
    "_setMarketBorrowCaps(address[],uint256[])": FunctionFragment;
    "_setMarketSupplyCaps(address[],uint256[])": FunctionFragment;
    "_setNAIController(address)": FunctionFragment;
    "_setNAIMintRate(uint256)": FunctionFragment;
    "_setNAIVaultInfo(address,uint256,uint256)": FunctionFragment;
    "_setNarwhalNAIVaultRate(uint256)": FunctionFragment;
    "_setNarwhalSpeed(address,uint256)": FunctionFragment;
    "_setPauseGuardian(address)": FunctionFragment;
    "_setPriceOracle(address)": FunctionFragment;
    "_setProtocolPaused(bool)": FunctionFragment;
    "_setTreasuryData(address,address,uint256)": FunctionFragment;
    "_supportMarket(address)": FunctionFragment;
    "accountAssets(address,uint256)": FunctionFragment;
    "actionPaused(address,uint8)": FunctionFragment;
    "admin()": FunctionFragment;
    "allMarkets(uint256)": FunctionFragment;
    "borrowAllowed(address,address,uint256)": FunctionFragment;
    "borrowCapGuardian()": FunctionFragment;
    "borrowCaps(address)": FunctionFragment;
    "borrowVerify(address,address,uint256)": FunctionFragment;
    "checkMembership(address,address)": FunctionFragment;
    "claimNarwhal(address)": FunctionFragment;
    "claimNarwhal(address[],address[],bool,bool)": FunctionFragment;
    "claimNarwhal(address,address[])": FunctionFragment;
    "claimNarwhal(address[],address[],bool,bool,bool)": FunctionFragment;
    "claimNarwhalAsCollateral(address)": FunctionFragment;
    "closeFactorMantissa()": FunctionFragment;
    "comptrollerImplementation()": FunctionFragment;
    "comptrollerLens()": FunctionFragment;
    "enterMarkets(address[])": FunctionFragment;
    "exitMarket(address)": FunctionFragment;
    "getAccountLiquidity(address)": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "getAssetsIn(address)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "getNWLAddress()": FunctionFragment;
    "isComptroller()": FunctionFragment;
    "liquidateBorrowAllowed(address,address,address,address,uint256)": FunctionFragment;
    "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": FunctionFragment;
    "liquidateCalculateSeizeTokens(address,address,uint256)": FunctionFragment;
    "liquidateNAICalculateSeizeTokens(address,uint256)": FunctionFragment;
    "liquidationIncentiveMantissa()": FunctionFragment;
    "liquidatorContract()": FunctionFragment;
    "markets(address)": FunctionFragment;
    "maxAssets()": FunctionFragment;
    "minReleaseAmount()": FunctionFragment;
    "mintAllowed(address,address,uint256)": FunctionFragment;
    "mintNAIGuardianPaused()": FunctionFragment;
    "mintVerify(address,address,uint256,uint256)": FunctionFragment;
    "mintedNAIs(address)": FunctionFragment;
    "naiController()": FunctionFragment;
    "naiMintRate()": FunctionFragment;
    "naiVaultAddress()": FunctionFragment;
    "narwhalAccrued(address)": FunctionFragment;
    "narwhalBorrowState(address)": FunctionFragment;
    "narwhalBorrowerIndex(address,address)": FunctionFragment;
    "narwhalInitialIndex()": FunctionFragment;
    "narwhalNAIVaultRate()": FunctionFragment;
    "narwhalRate()": FunctionFragment;
    "narwhalSpeeds(address)": FunctionFragment;
    "narwhalSupplierIndex(address,address)": FunctionFragment;
    "narwhalSupplyState(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pendingComptrollerImplementation()": FunctionFragment;
    "protocolPaused()": FunctionFragment;
    "redeemAllowed(address,address,uint256)": FunctionFragment;
    "redeemVerify(address,address,uint256,uint256)": FunctionFragment;
    "releaseStartBlock()": FunctionFragment;
    "releaseToVault()": FunctionFragment;
    "repayBorrowAllowed(address,address,address,uint256)": FunctionFragment;
    "repayBorrowVerify(address,address,address,uint256,uint256)": FunctionFragment;
    "repayNAIGuardianPaused()": FunctionFragment;
    "seizeAllowed(address,address,address,address,uint256)": FunctionFragment;
    "seizeVerify(address,address,address,address,uint256)": FunctionFragment;
    "setMintedNAIOf(address,uint256)": FunctionFragment;
    "supplyCaps(address)": FunctionFragment;
    "transferAllowed(address,address,address,uint256)": FunctionFragment;
    "transferVerify(address,address,address,uint256)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "treasuryGuardian()": FunctionFragment;
    "treasuryPercent()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_become"
      | "_grantNWL"
      | "_setAccessControl"
      | "_setActionsPaused"
      | "_setCloseFactor"
      | "_setCollateralFactor"
      | "_setComptrollerLens"
      | "_setLiquidationIncentive"
      | "_setLiquidatorContract"
      | "_setMarketBorrowCaps"
      | "_setMarketSupplyCaps"
      | "_setNAIController"
      | "_setNAIMintRate"
      | "_setNAIVaultInfo"
      | "_setNarwhalNAIVaultRate"
      | "_setNarwhalSpeed"
      | "_setPauseGuardian"
      | "_setPriceOracle"
      | "_setProtocolPaused"
      | "_setTreasuryData"
      | "_supportMarket"
      | "accountAssets"
      | "actionPaused"
      | "admin"
      | "allMarkets"
      | "borrowAllowed"
      | "borrowCapGuardian"
      | "borrowCaps"
      | "borrowVerify"
      | "checkMembership"
      | "claimNarwhal(address)"
      | "claimNarwhal(address[],address[],bool,bool)"
      | "claimNarwhal(address,address[])"
      | "claimNarwhal(address[],address[],bool,bool,bool)"
      | "claimNarwhalAsCollateral"
      | "closeFactorMantissa"
      | "comptrollerImplementation"
      | "comptrollerLens"
      | "enterMarkets"
      | "exitMarket"
      | "getAccountLiquidity"
      | "getAllMarkets"
      | "getAssetsIn"
      | "getBlockNumber"
      | "getHypotheticalAccountLiquidity"
      | "getNWLAddress"
      | "isComptroller"
      | "liquidateBorrowAllowed"
      | "liquidateBorrowVerify"
      | "liquidateCalculateSeizeTokens"
      | "liquidateNAICalculateSeizeTokens"
      | "liquidationIncentiveMantissa"
      | "liquidatorContract"
      | "markets"
      | "maxAssets"
      | "minReleaseAmount"
      | "mintAllowed"
      | "mintNAIGuardianPaused"
      | "mintVerify"
      | "mintedNAIs"
      | "naiController"
      | "naiMintRate"
      | "naiVaultAddress"
      | "narwhalAccrued"
      | "narwhalBorrowState"
      | "narwhalBorrowerIndex"
      | "narwhalInitialIndex"
      | "narwhalNAIVaultRate"
      | "narwhalRate"
      | "narwhalSpeeds"
      | "narwhalSupplierIndex"
      | "narwhalSupplyState"
      | "oracle"
      | "pauseGuardian"
      | "pendingAdmin"
      | "pendingComptrollerImplementation"
      | "protocolPaused"
      | "redeemAllowed"
      | "redeemVerify"
      | "releaseStartBlock"
      | "releaseToVault"
      | "repayBorrowAllowed"
      | "repayBorrowVerify"
      | "repayNAIGuardianPaused"
      | "seizeAllowed"
      | "seizeVerify"
      | "setMintedNAIOf"
      | "supplyCaps"
      | "transferAllowed"
      | "transferVerify"
      | "treasuryAddress"
      | "treasuryGuardian"
      | "treasuryPercent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_become",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_grantNWL",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setAccessControl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setActionsPaused",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCloseFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCollateralFactor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setComptrollerLens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLiquidationIncentive",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLiquidatorContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMarketBorrowCaps",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMarketSupplyCaps",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setNAIController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setNAIMintRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setNAIVaultInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setNarwhalNAIVaultRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setNarwhalSpeed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPauseGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setProtocolPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setTreasuryData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_supportMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountAssets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "actionPaused",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCapGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCaps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowVerify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMembership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNarwhal(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNarwhal(address[],address[],bool,bool)",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNarwhal(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNarwhal(address[],address[],bool,bool,bool)",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNarwhalAsCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comptrollerLens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsIn",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNWLAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isComptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowVerify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCalculateSeizeTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateNAICalculateSeizeTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "maxAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minReleaseAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNAIGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintVerify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedNAIs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "naiController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "naiMintRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "naiVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalAccrued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalBorrowState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalBorrowerIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalNAIVaultRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalSpeeds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalSupplierIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "narwhalSupplyState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingComptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVerify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseToVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowVerify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayNAIGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizeAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeVerify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintedNAIOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCaps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVerify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryPercent",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_become", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_grantNWL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setActionsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCloseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setComptrollerLens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLiquidatorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMarketBorrowCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMarketSupplyCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNAIController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNAIMintRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNAIVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNarwhalNAIVaultRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNarwhalSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setProtocolPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setTreasuryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_supportMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowCapGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNarwhal(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNarwhal(address[],address[],bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNarwhal(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNarwhal(address[],address[],bool,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNarwhalAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptrollerLens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNWLAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateNAICalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minReleaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNAIGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintVerify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintedNAIs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "naiController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "naiMintRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "naiVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalBorrowState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalBorrowerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalNAIVaultRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalSupplierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "narwhalSupplyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingComptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayNAIGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintedNAIOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPercent",
    data: BytesLike
  ): Result;

  events: {
    "ActionPausedMarket(address,uint8,bool)": EventFragment;
    "ActionProtocolPaused(bool)": EventFragment;
    "DistributedBorrowerNarwhal(address,address,uint256,uint256)": EventFragment;
    "DistributedNAIVaultNarwhal(uint256)": EventFragment;
    "DistributedSupplierNarwhal(address,address,uint256,uint256)": EventFragment;
    "Failure(uint256,uint256,uint256)": EventFragment;
    "MarketEntered(address,address)": EventFragment;
    "MarketExited(address,address)": EventFragment;
    "MarketListed(address)": EventFragment;
    "NarwhalGranted(address,uint256)": EventFragment;
    "NarwhalSpeedUpdated(address,uint256)": EventFragment;
    "NewAccessControl(address,address)": EventFragment;
    "NewBorrowCap(address,uint256)": EventFragment;
    "NewCloseFactor(uint256,uint256)": EventFragment;
    "NewCollateralFactor(address,uint256,uint256)": EventFragment;
    "NewComptrollerLens(address,address)": EventFragment;
    "NewLiquidationIncentive(uint256,uint256)": EventFragment;
    "NewLiquidatorContract(address,address)": EventFragment;
    "NewNAIController(address,address)": EventFragment;
    "NewNAIMintRate(uint256,uint256)": EventFragment;
    "NewNAIVaultInfo(address,uint256,uint256)": EventFragment;
    "NewNarwhalNAIVaultRate(uint256,uint256)": EventFragment;
    "NewPauseGuardian(address,address)": EventFragment;
    "NewPriceOracle(address,address)": EventFragment;
    "NewSupplyCap(address,uint256)": EventFragment;
    "NewTreasuryAddress(address,address)": EventFragment;
    "NewTreasuryGuardian(address,address)": EventFragment;
    "NewTreasuryPercent(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionPausedMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionProtocolPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedBorrowerNarwhal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedNAIVaultNarwhal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedSupplierNarwhal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Failure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NarwhalGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NarwhalSpeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAccessControl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBorrowCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCloseFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCollateralFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewComptrollerLens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidationIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidatorContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNAIController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNAIMintRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNAIVaultInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNarwhalNAIVaultRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPauseGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriceOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSupplyCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryPercent"): EventFragment;
}

export interface ActionPausedMarketEventObject {
  nToken: string;
  action: number;
  pauseState: boolean;
}
export type ActionPausedMarketEvent = TypedEvent<
  [string, number, boolean],
  ActionPausedMarketEventObject
>;

export type ActionPausedMarketEventFilter =
  TypedEventFilter<ActionPausedMarketEvent>;

export interface ActionProtocolPausedEventObject {
  state: boolean;
}
export type ActionProtocolPausedEvent = TypedEvent<
  [boolean],
  ActionProtocolPausedEventObject
>;

export type ActionProtocolPausedEventFilter =
  TypedEventFilter<ActionProtocolPausedEvent>;

export interface DistributedBorrowerNarwhalEventObject {
  nToken: string;
  borrower: string;
  narwhalDelta: BigNumber;
  narwhalBorrowIndex: BigNumber;
}
export type DistributedBorrowerNarwhalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedBorrowerNarwhalEventObject
>;

export type DistributedBorrowerNarwhalEventFilter =
  TypedEventFilter<DistributedBorrowerNarwhalEvent>;

export interface DistributedNAIVaultNarwhalEventObject {
  amount: BigNumber;
}
export type DistributedNAIVaultNarwhalEvent = TypedEvent<
  [BigNumber],
  DistributedNAIVaultNarwhalEventObject
>;

export type DistributedNAIVaultNarwhalEventFilter =
  TypedEventFilter<DistributedNAIVaultNarwhalEvent>;

export interface DistributedSupplierNarwhalEventObject {
  nToken: string;
  supplier: string;
  narwhalDelta: BigNumber;
  narwhalSupplyIndex: BigNumber;
}
export type DistributedSupplierNarwhalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedSupplierNarwhalEventObject
>;

export type DistributedSupplierNarwhalEventFilter =
  TypedEventFilter<DistributedSupplierNarwhalEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FailureEventObject
>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface MarketEnteredEventObject {
  nToken: string;
  account: string;
}
export type MarketEnteredEvent = TypedEvent<
  [string, string],
  MarketEnteredEventObject
>;

export type MarketEnteredEventFilter = TypedEventFilter<MarketEnteredEvent>;

export interface MarketExitedEventObject {
  nToken: string;
  account: string;
}
export type MarketExitedEvent = TypedEvent<
  [string, string],
  MarketExitedEventObject
>;

export type MarketExitedEventFilter = TypedEventFilter<MarketExitedEvent>;

export interface MarketListedEventObject {
  nToken: string;
}
export type MarketListedEvent = TypedEvent<[string], MarketListedEventObject>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export interface NarwhalGrantedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type NarwhalGrantedEvent = TypedEvent<
  [string, BigNumber],
  NarwhalGrantedEventObject
>;

export type NarwhalGrantedEventFilter = TypedEventFilter<NarwhalGrantedEvent>;

export interface NarwhalSpeedUpdatedEventObject {
  nToken: string;
  newSpeed: BigNumber;
}
export type NarwhalSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  NarwhalSpeedUpdatedEventObject
>;

export type NarwhalSpeedUpdatedEventFilter =
  TypedEventFilter<NarwhalSpeedUpdatedEvent>;

export interface NewAccessControlEventObject {
  oldAccessControlAddress: string;
  newAccessControlAddress: string;
}
export type NewAccessControlEvent = TypedEvent<
  [string, string],
  NewAccessControlEventObject
>;

export type NewAccessControlEventFilter =
  TypedEventFilter<NewAccessControlEvent>;

export interface NewBorrowCapEventObject {
  nToken: string;
  newBorrowCap: BigNumber;
}
export type NewBorrowCapEvent = TypedEvent<
  [string, BigNumber],
  NewBorrowCapEventObject
>;

export type NewBorrowCapEventFilter = TypedEventFilter<NewBorrowCapEvent>;

export interface NewCloseFactorEventObject {
  oldCloseFactorMantissa: BigNumber;
  newCloseFactorMantissa: BigNumber;
}
export type NewCloseFactorEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewCloseFactorEventObject
>;

export type NewCloseFactorEventFilter = TypedEventFilter<NewCloseFactorEvent>;

export interface NewCollateralFactorEventObject {
  nToken: string;
  oldCollateralFactorMantissa: BigNumber;
  newCollateralFactorMantissa: BigNumber;
}
export type NewCollateralFactorEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewCollateralFactorEventObject
>;

export type NewCollateralFactorEventFilter =
  TypedEventFilter<NewCollateralFactorEvent>;

export interface NewComptrollerLensEventObject {
  oldComptrollerLens: string;
  newComptrollerLens: string;
}
export type NewComptrollerLensEvent = TypedEvent<
  [string, string],
  NewComptrollerLensEventObject
>;

export type NewComptrollerLensEventFilter =
  TypedEventFilter<NewComptrollerLensEvent>;

export interface NewLiquidationIncentiveEventObject {
  oldLiquidationIncentiveMantissa: BigNumber;
  newLiquidationIncentiveMantissa: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewLiquidationIncentiveEventObject
>;

export type NewLiquidationIncentiveEventFilter =
  TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewLiquidatorContractEventObject {
  oldLiquidatorContract: string;
  newLiquidatorContract: string;
}
export type NewLiquidatorContractEvent = TypedEvent<
  [string, string],
  NewLiquidatorContractEventObject
>;

export type NewLiquidatorContractEventFilter =
  TypedEventFilter<NewLiquidatorContractEvent>;

export interface NewNAIControllerEventObject {
  oldNAIController: string;
  newNAIController: string;
}
export type NewNAIControllerEvent = TypedEvent<
  [string, string],
  NewNAIControllerEventObject
>;

export type NewNAIControllerEventFilter =
  TypedEventFilter<NewNAIControllerEvent>;

export interface NewNAIMintRateEventObject {
  oldNAIMintRate: BigNumber;
  newNAIMintRate: BigNumber;
}
export type NewNAIMintRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewNAIMintRateEventObject
>;

export type NewNAIMintRateEventFilter = TypedEventFilter<NewNAIMintRateEvent>;

export interface NewNAIVaultInfoEventObject {
  vault_: string;
  releaseStartBlock_: BigNumber;
  releaseInterval_: BigNumber;
}
export type NewNAIVaultInfoEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewNAIVaultInfoEventObject
>;

export type NewNAIVaultInfoEventFilter = TypedEventFilter<NewNAIVaultInfoEvent>;

export interface NewNarwhalNAIVaultRateEventObject {
  oldNarwhalNAIVaultRate: BigNumber;
  newNarwhalNAIVaultRate: BigNumber;
}
export type NewNarwhalNAIVaultRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewNarwhalNAIVaultRateEventObject
>;

export type NewNarwhalNAIVaultRateEventFilter =
  TypedEventFilter<NewNarwhalNAIVaultRateEvent>;

export interface NewPauseGuardianEventObject {
  oldPauseGuardian: string;
  newPauseGuardian: string;
}
export type NewPauseGuardianEvent = TypedEvent<
  [string, string],
  NewPauseGuardianEventObject
>;

export type NewPauseGuardianEventFilter =
  TypedEventFilter<NewPauseGuardianEvent>;

export interface NewPriceOracleEventObject {
  oldPriceOracle: string;
  newPriceOracle: string;
}
export type NewPriceOracleEvent = TypedEvent<
  [string, string],
  NewPriceOracleEventObject
>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export interface NewSupplyCapEventObject {
  nToken: string;
  newSupplyCap: BigNumber;
}
export type NewSupplyCapEvent = TypedEvent<
  [string, BigNumber],
  NewSupplyCapEventObject
>;

export type NewSupplyCapEventFilter = TypedEventFilter<NewSupplyCapEvent>;

export interface NewTreasuryAddressEventObject {
  oldTreasuryAddress: string;
  newTreasuryAddress: string;
}
export type NewTreasuryAddressEvent = TypedEvent<
  [string, string],
  NewTreasuryAddressEventObject
>;

export type NewTreasuryAddressEventFilter =
  TypedEventFilter<NewTreasuryAddressEvent>;

export interface NewTreasuryGuardianEventObject {
  oldTreasuryGuardian: string;
  newTreasuryGuardian: string;
}
export type NewTreasuryGuardianEvent = TypedEvent<
  [string, string],
  NewTreasuryGuardianEventObject
>;

export type NewTreasuryGuardianEventFilter =
  TypedEventFilter<NewTreasuryGuardianEvent>;

export interface NewTreasuryPercentEventObject {
  oldTreasuryPercent: BigNumber;
  newTreasuryPercent: BigNumber;
}
export type NewTreasuryPercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewTreasuryPercentEventObject
>;

export type NewTreasuryPercentEventFilter =
  TypedEventFilter<NewTreasuryPercentEvent>;

export interface Comptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _grantNWL(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setAccessControl(
      newAccessControlAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setActionsPaused(
      markets: PromiseOrValue<string>[],
      actions: PromiseOrValue<BigNumberish>[],
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      nToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setComptrollerLens(
      comptrollerLens_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setLiquidatorContract(
      newLiquidatorContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setMarketBorrowCaps(
      nTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setMarketSupplyCaps(
      nTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNAIController(
      naiController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNAIMintRate(
      newNAIMintRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNAIVaultInfo(
      vault_: PromiseOrValue<string>,
      releaseStartBlock_: PromiseOrValue<BigNumberish>,
      minReleaseAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNarwhalNAIVaultRate(
      narwhalNAIVaultRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNarwhalSpeed(
      nToken: PromiseOrValue<string>,
      narwhalSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setProtocolPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _supportMarket(
      nToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    actionPaused(
      market: PromiseOrValue<string>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    borrowAllowed(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<[string]>;

    borrowCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowVerify(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "claimNarwhal(address)"(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimNarwhal(address[],address[],bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimNarwhal(address,address[])"(
      holder: PromiseOrValue<string>,
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimNarwhal(address[],address[],bool,bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimNarwhalAsCollateral(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    comptrollerLens(overrides?: CallOverrides): Promise<[string]>;

    enterMarkets(
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitMarket(
      nTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getNWLAddress(overrides?: CallOverrides): Promise<[string]>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrowAllowed(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidateNAICalculateSeizeTokens(
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidatorContract(overrides?: CallOverrides): Promise<[string]>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isNarwhal: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReleaseAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAllowed(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNAIGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mintVerify(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintedNAIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    naiController(overrides?: CallOverrides): Promise<[string]>;

    naiMintRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    naiVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    narwhalAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    narwhalBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    narwhalBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    narwhalInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    narwhalNAIVaultRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    narwhalRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    narwhalSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    narwhalSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    narwhalSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    protocolPaused(overrides?: CallOverrides): Promise<[boolean]>;

    redeemAllowed(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemVerify(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseToVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayBorrowAllowed(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayNAIGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    seizeAllowed(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seizeVerify(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintedNAIOf(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferAllowed(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferVerify(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    treasuryGuardian(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercent(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _become(
    unitroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _grantNWL(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setAccessControl(
    newAccessControlAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setActionsPaused(
    markets: PromiseOrValue<string>[],
    actions: PromiseOrValue<BigNumberish>[],
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    nToken: PromiseOrValue<string>,
    newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setComptrollerLens(
    comptrollerLens_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setLiquidatorContract(
    newLiquidatorContract_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setMarketBorrowCaps(
    nTokens: PromiseOrValue<string>[],
    newBorrowCaps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setMarketSupplyCaps(
    nTokens: PromiseOrValue<string>[],
    newSupplyCaps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNAIController(
    naiController_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNAIMintRate(
    newNAIMintRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNAIVaultInfo(
    vault_: PromiseOrValue<string>,
    releaseStartBlock_: PromiseOrValue<BigNumberish>,
    minReleaseAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNarwhalNAIVaultRate(
    narwhalNAIVaultRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNarwhalSpeed(
    nToken: PromiseOrValue<string>,
    narwhalSpeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setPauseGuardian(
    newPauseGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setProtocolPaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setTreasuryData(
    newTreasuryGuardian: PromiseOrValue<string>,
    newTreasuryAddress: PromiseOrValue<string>,
    newTreasuryPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _supportMarket(
    nToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accountAssets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  actionPaused(
    market: PromiseOrValue<string>,
    action: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  admin(overrides?: CallOverrides): Promise<string>;

  allMarkets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  borrowAllowed(
    nToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

  borrowCaps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowVerify(
    nToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkMembership(
    account: PromiseOrValue<string>,
    nToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "claimNarwhal(address)"(
    holder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimNarwhal(address[],address[],bool,bool)"(
    holders: PromiseOrValue<string>[],
    nTokens: PromiseOrValue<string>[],
    borrowers: PromiseOrValue<boolean>,
    suppliers: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimNarwhal(address,address[])"(
    holder: PromiseOrValue<string>,
    nTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimNarwhal(address[],address[],bool,bool,bool)"(
    holders: PromiseOrValue<string>[],
    nTokens: PromiseOrValue<string>[],
    borrowers: PromiseOrValue<boolean>,
    suppliers: PromiseOrValue<boolean>,
    collateral: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimNarwhalAsCollateral(
    holder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  comptrollerLens(overrides?: CallOverrides): Promise<string>;

  enterMarkets(
    nTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitMarket(
    nTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getHypotheticalAccountLiquidity(
    account: PromiseOrValue<string>,
    nTokenModify: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getNWLAddress(overrides?: CallOverrides): Promise<string>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrowAllowed(
    nTokenBorrowed: PromiseOrValue<string>,
    nTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    nTokenBorrowed: PromiseOrValue<string>,
    nTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    nTokenBorrowed: PromiseOrValue<string>,
    nTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  liquidateNAICalculateSeizeTokens(
    nTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatorContract(overrides?: CallOverrides): Promise<string>;

  markets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
      isNarwhal: boolean;
    }
  >;

  maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

  minReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mintAllowed(
    nToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  mintVerify(
    nToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    actualMintAmount: PromiseOrValue<BigNumberish>,
    mintTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintedNAIs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  naiController(overrides?: CallOverrides): Promise<string>;

  naiMintRate(overrides?: CallOverrides): Promise<BigNumber>;

  naiVaultAddress(overrides?: CallOverrides): Promise<string>;

  narwhalAccrued(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  narwhalBorrowState(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  narwhalBorrowerIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  narwhalInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  narwhalNAIVaultRate(overrides?: CallOverrides): Promise<BigNumber>;

  narwhalRate(overrides?: CallOverrides): Promise<BigNumber>;

  narwhalSpeeds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  narwhalSupplierIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  narwhalSupplyState(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  protocolPaused(overrides?: CallOverrides): Promise<boolean>;

  redeemAllowed(
    nToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemVerify(
    nToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemAmount: PromiseOrValue<BigNumberish>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  releaseToVault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayBorrowAllowed(
    nToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    nToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    borrowerIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayNAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  seizeAllowed(
    nTokenCollateral: PromiseOrValue<string>,
    nTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seizeVerify(
    nTokenCollateral: PromiseOrValue<string>,
    nTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintedNAIOf(
    owner: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplyCaps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferAllowed(
    nToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferVerify(
    nToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  treasuryGuardian(overrides?: CallOverrides): Promise<string>;

  treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _grantNWL(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setAccessControl(
      newAccessControlAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setActionsPaused(
      markets: PromiseOrValue<string>[],
      actions: PromiseOrValue<BigNumberish>[],
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setCollateralFactor(
      nToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setComptrollerLens(
      comptrollerLens_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setLiquidatorContract(
      newLiquidatorContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setMarketBorrowCaps(
      nTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setMarketSupplyCaps(
      nTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setNAIController(
      naiController_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setNAIMintRate(
      newNAIMintRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setNAIVaultInfo(
      vault_: PromiseOrValue<string>,
      releaseStartBlock_: PromiseOrValue<BigNumberish>,
      minReleaseAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setNarwhalNAIVaultRate(
      narwhalNAIVaultRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setNarwhalSpeed(
      nToken: PromiseOrValue<string>,
      narwhalSpeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setProtocolPaused(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _supportMarket(
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    actionPaused(
      market: PromiseOrValue<string>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    borrowAllowed(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

    borrowCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowVerify(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkMembership(
      account: PromiseOrValue<string>,
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimNarwhal(address)"(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimNarwhal(address[],address[],bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimNarwhal(address,address[])"(
      holder: PromiseOrValue<string>,
      nTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimNarwhal(address[],address[],bool,bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimNarwhalAsCollateral(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    comptrollerLens(overrides?: CallOverrides): Promise<string>;

    enterMarkets(
      nTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exitMarket(
      nTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getNWLAddress(overrides?: CallOverrides): Promise<string>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrowAllowed(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateCalculateSeizeTokens(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidateNAICalculateSeizeTokens(
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorContract(overrides?: CallOverrides): Promise<string>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isNarwhal: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    minReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    mintVerify(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintedNAIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    naiController(overrides?: CallOverrides): Promise<string>;

    naiMintRate(overrides?: CallOverrides): Promise<BigNumber>;

    naiVaultAddress(overrides?: CallOverrides): Promise<string>;

    narwhalAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    narwhalBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalNAIVaultRate(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalRate(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<string>;

    protocolPaused(overrides?: CallOverrides): Promise<boolean>;

    redeemAllowed(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemVerify(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    releaseToVault(overrides?: CallOverrides): Promise<void>;

    repayBorrowAllowed(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrowVerify(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayNAIGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    seizeAllowed(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seizeVerify(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintedNAIOf(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAllowed(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferVerify(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    treasuryGuardian(overrides?: CallOverrides): Promise<string>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ActionPausedMarket(address,uint8,bool)"(
      nToken?: PromiseOrValue<string> | null,
      action?: PromiseOrValue<BigNumberish> | null,
      pauseState?: null
    ): ActionPausedMarketEventFilter;
    ActionPausedMarket(
      nToken?: PromiseOrValue<string> | null,
      action?: PromiseOrValue<BigNumberish> | null,
      pauseState?: null
    ): ActionPausedMarketEventFilter;

    "ActionProtocolPaused(bool)"(state?: null): ActionProtocolPausedEventFilter;
    ActionProtocolPaused(state?: null): ActionProtocolPausedEventFilter;

    "DistributedBorrowerNarwhal(address,address,uint256,uint256)"(
      nToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      narwhalDelta?: null,
      narwhalBorrowIndex?: null
    ): DistributedBorrowerNarwhalEventFilter;
    DistributedBorrowerNarwhal(
      nToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      narwhalDelta?: null,
      narwhalBorrowIndex?: null
    ): DistributedBorrowerNarwhalEventFilter;

    "DistributedNAIVaultNarwhal(uint256)"(
      amount?: null
    ): DistributedNAIVaultNarwhalEventFilter;
    DistributedNAIVaultNarwhal(
      amount?: null
    ): DistributedNAIVaultNarwhalEventFilter;

    "DistributedSupplierNarwhal(address,address,uint256,uint256)"(
      nToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      narwhalDelta?: null,
      narwhalSupplyIndex?: null
    ): DistributedSupplierNarwhalEventFilter;
    DistributedSupplierNarwhal(
      nToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      narwhalDelta?: null,
      narwhalSupplyIndex?: null
    ): DistributedSupplierNarwhalEventFilter;

    "Failure(uint256,uint256,uint256)"(
      error?: null,
      info?: null,
      detail?: null
    ): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    "MarketEntered(address,address)"(
      nToken?: null,
      account?: null
    ): MarketEnteredEventFilter;
    MarketEntered(nToken?: null, account?: null): MarketEnteredEventFilter;

    "MarketExited(address,address)"(
      nToken?: null,
      account?: null
    ): MarketExitedEventFilter;
    MarketExited(nToken?: null, account?: null): MarketExitedEventFilter;

    "MarketListed(address)"(nToken?: null): MarketListedEventFilter;
    MarketListed(nToken?: null): MarketListedEventFilter;

    "NarwhalGranted(address,uint256)"(
      recipient?: null,
      amount?: null
    ): NarwhalGrantedEventFilter;
    NarwhalGranted(recipient?: null, amount?: null): NarwhalGrantedEventFilter;

    "NarwhalSpeedUpdated(address,uint256)"(
      nToken?: PromiseOrValue<string> | null,
      newSpeed?: null
    ): NarwhalSpeedUpdatedEventFilter;
    NarwhalSpeedUpdated(
      nToken?: PromiseOrValue<string> | null,
      newSpeed?: null
    ): NarwhalSpeedUpdatedEventFilter;

    "NewAccessControl(address,address)"(
      oldAccessControlAddress?: null,
      newAccessControlAddress?: null
    ): NewAccessControlEventFilter;
    NewAccessControl(
      oldAccessControlAddress?: null,
      newAccessControlAddress?: null
    ): NewAccessControlEventFilter;

    "NewBorrowCap(address,uint256)"(
      nToken?: PromiseOrValue<string> | null,
      newBorrowCap?: null
    ): NewBorrowCapEventFilter;
    NewBorrowCap(
      nToken?: PromiseOrValue<string> | null,
      newBorrowCap?: null
    ): NewBorrowCapEventFilter;

    "NewCloseFactor(uint256,uint256)"(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): NewCloseFactorEventFilter;
    NewCloseFactor(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): NewCloseFactorEventFilter;

    "NewCollateralFactor(address,uint256,uint256)"(
      nToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null
    ): NewCollateralFactorEventFilter;
    NewCollateralFactor(
      nToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null
    ): NewCollateralFactorEventFilter;

    "NewComptrollerLens(address,address)"(
      oldComptrollerLens?: null,
      newComptrollerLens?: null
    ): NewComptrollerLensEventFilter;
    NewComptrollerLens(
      oldComptrollerLens?: null,
      newComptrollerLens?: null
    ): NewComptrollerLensEventFilter;

    "NewLiquidationIncentive(uint256,uint256)"(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null
    ): NewLiquidationIncentiveEventFilter;

    "NewLiquidatorContract(address,address)"(
      oldLiquidatorContract?: null,
      newLiquidatorContract?: null
    ): NewLiquidatorContractEventFilter;
    NewLiquidatorContract(
      oldLiquidatorContract?: null,
      newLiquidatorContract?: null
    ): NewLiquidatorContractEventFilter;

    "NewNAIController(address,address)"(
      oldNAIController?: null,
      newNAIController?: null
    ): NewNAIControllerEventFilter;
    NewNAIController(
      oldNAIController?: null,
      newNAIController?: null
    ): NewNAIControllerEventFilter;

    "NewNAIMintRate(uint256,uint256)"(
      oldNAIMintRate?: null,
      newNAIMintRate?: null
    ): NewNAIMintRateEventFilter;
    NewNAIMintRate(
      oldNAIMintRate?: null,
      newNAIMintRate?: null
    ): NewNAIMintRateEventFilter;

    "NewNAIVaultInfo(address,uint256,uint256)"(
      vault_?: null,
      releaseStartBlock_?: null,
      releaseInterval_?: null
    ): NewNAIVaultInfoEventFilter;
    NewNAIVaultInfo(
      vault_?: null,
      releaseStartBlock_?: null,
      releaseInterval_?: null
    ): NewNAIVaultInfoEventFilter;

    "NewNarwhalNAIVaultRate(uint256,uint256)"(
      oldNarwhalNAIVaultRate?: null,
      newNarwhalNAIVaultRate?: null
    ): NewNarwhalNAIVaultRateEventFilter;
    NewNarwhalNAIVaultRate(
      oldNarwhalNAIVaultRate?: null,
      newNarwhalNAIVaultRate?: null
    ): NewNarwhalNAIVaultRateEventFilter;

    "NewPauseGuardian(address,address)"(
      oldPauseGuardian?: null,
      newPauseGuardian?: null
    ): NewPauseGuardianEventFilter;
    NewPauseGuardian(
      oldPauseGuardian?: null,
      newPauseGuardian?: null
    ): NewPauseGuardianEventFilter;

    "NewPriceOracle(address,address)"(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): NewPriceOracleEventFilter;
    NewPriceOracle(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): NewPriceOracleEventFilter;

    "NewSupplyCap(address,uint256)"(
      nToken?: PromiseOrValue<string> | null,
      newSupplyCap?: null
    ): NewSupplyCapEventFilter;
    NewSupplyCap(
      nToken?: PromiseOrValue<string> | null,
      newSupplyCap?: null
    ): NewSupplyCapEventFilter;

    "NewTreasuryAddress(address,address)"(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null
    ): NewTreasuryAddressEventFilter;
    NewTreasuryAddress(
      oldTreasuryAddress?: null,
      newTreasuryAddress?: null
    ): NewTreasuryAddressEventFilter;

    "NewTreasuryGuardian(address,address)"(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null
    ): NewTreasuryGuardianEventFilter;
    NewTreasuryGuardian(
      oldTreasuryGuardian?: null,
      newTreasuryGuardian?: null
    ): NewTreasuryGuardianEventFilter;

    "NewTreasuryPercent(uint256,uint256)"(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null
    ): NewTreasuryPercentEventFilter;
    NewTreasuryPercent(
      oldTreasuryPercent?: null,
      newTreasuryPercent?: null
    ): NewTreasuryPercentEventFilter;
  };

  estimateGas: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _grantNWL(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setAccessControl(
      newAccessControlAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setActionsPaused(
      markets: PromiseOrValue<string>[],
      actions: PromiseOrValue<BigNumberish>[],
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setCollateralFactor(
      nToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setComptrollerLens(
      comptrollerLens_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setLiquidatorContract(
      newLiquidatorContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      nTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setMarketSupplyCaps(
      nTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNAIController(
      naiController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNAIMintRate(
      newNAIMintRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNAIVaultInfo(
      vault_: PromiseOrValue<string>,
      releaseStartBlock_: PromiseOrValue<BigNumberish>,
      minReleaseAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNarwhalNAIVaultRate(
      narwhalNAIVaultRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNarwhalSpeed(
      nToken: PromiseOrValue<string>,
      narwhalSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setProtocolPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _supportMarket(
      nToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    actionPaused(
      market: PromiseOrValue<string>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowAllowed(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    borrowCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowVerify(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkMembership(
      account: PromiseOrValue<string>,
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimNarwhal(address)"(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimNarwhal(address[],address[],bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimNarwhal(address,address[])"(
      holder: PromiseOrValue<string>,
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimNarwhal(address[],address[],bool,bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimNarwhalAsCollateral(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerLens(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitMarket(
      nTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNWLAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateNAICalculateSeizeTokens(
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorContract(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    minReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNAIGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mintVerify(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintedNAIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    naiController(overrides?: CallOverrides): Promise<BigNumber>;

    naiMintRate(overrides?: CallOverrides): Promise<BigNumber>;

    naiVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalNAIVaultRate(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalRate(overrides?: CallOverrides): Promise<BigNumber>;

    narwhalSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    narwhalSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolPaused(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllowed(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemVerify(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    releaseToVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayBorrowAllowed(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayBorrowVerify(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayNAIGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    seizeAllowed(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seizeVerify(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintedNAIOf(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAllowed(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferVerify(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _grantNWL(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setAccessControl(
      newAccessControlAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setActionsPaused(
      markets: PromiseOrValue<string>[],
      actions: PromiseOrValue<BigNumberish>[],
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      nToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setComptrollerLens(
      comptrollerLens_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setLiquidatorContract(
      newLiquidatorContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setMarketBorrowCaps(
      nTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setMarketSupplyCaps(
      nTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNAIController(
      naiController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNAIMintRate(
      newNAIMintRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNAIVaultInfo(
      vault_: PromiseOrValue<string>,
      releaseStartBlock_: PromiseOrValue<BigNumberish>,
      minReleaseAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNarwhalNAIVaultRate(
      narwhalNAIVaultRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNarwhalSpeed(
      nToken: PromiseOrValue<string>,
      narwhalSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setProtocolPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setTreasuryData(
      newTreasuryGuardian: PromiseOrValue<string>,
      newTreasuryAddress: PromiseOrValue<string>,
      newTreasuryPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _supportMarket(
      nToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    actionPaused(
      market: PromiseOrValue<string>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowAllowed(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowVerify(
      nToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      nToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimNarwhal(address)"(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimNarwhal(address[],address[],bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimNarwhal(address,address[])"(
      holder: PromiseOrValue<string>,
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimNarwhal(address[],address[],bool,bool,bool)"(
      holders: PromiseOrValue<string>[],
      nTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimNarwhalAsCollateral(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comptrollerLens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      nTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitMarket(
      nTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      nTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNWLAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateBorrowVerify(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      nTokenBorrowed: PromiseOrValue<string>,
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateNAICalculateSeizeTokens(
      nTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatorContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minReleaseAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAllowed(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNAIGuardianPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintVerify(
      nToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintedNAIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    naiController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    naiMintRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    naiVaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    narwhalAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalInitialIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalNAIVaultRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    narwhalSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    narwhalSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAllowed(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemVerify(
      nToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseToVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowVerify(
      nToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayNAIGuardianPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seizeAllowed(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seizeVerify(
      nTokenCollateral: PromiseOrValue<string>,
      nTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintedNAIOf(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAllowed(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferVerify(
      nToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
