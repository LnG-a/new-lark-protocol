/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type { Faucet, FaucetInterface } from "../../../contracts/Faucet/Faucet";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    constant: false,
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "asset",
            type: "string",
          },
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "frozenDuration",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxToClaimed",
            type: "uint256",
          },
        ],
        internalType: "struct Faucet.ClaimAssetsInfo[]",
        name: "_assets",
        type: "tuple[]",
      },
    ],
    name: "addAssets",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "assets",
    outputs: [
      {
        internalType: "string",
        name: "asset",
        type: "string",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "frozenDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxToClaimed",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "string",
        name: "_asset",
        type: "string",
      },
    ],
    name: "claim",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "lastClaimedStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600080546001600160a01b03191633179055610c1b806100256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806328632d4a1461006757806385936228146100905780638da5cb5b146100b3578063e0e674f8146100c8578063f2fde38b146100dd578063f3fe12c9146100f0575b600080fd5b61007a610075366004610798565b610103565b6040516100879190610aac565b60405180910390f35b6100a361009e36600461083d565b610131565b6040516100879493929190610a19565b6100bb6101f8565b60405161008791906109f0565b6100db6100d63660046107ea565b610207565b005b6100db6100eb366004610772565b61033e565b6100db6100fe36600461083d565b6103b6565b6002602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b8051602081830181018051600180835293830194830194909420939052825460408051600294831615610100026000190190921693909304601f81018390048302820183019093528281529183918301828280156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915084565b6000546001600160a01b031681565b6000546001600160a01b0316331461023a5760405162461bcd60e51b815260040161023190610a8c565b60405180910390fd5b60005b815181101561033a5781818151811061025257fe5b6020026020010151602001516001600160a01b031660006001600160a01b031614156102905760405162461bcd60e51b815260040161023190610a5c565b81818151811061029c57fe5b602002602001015160018383815181106102b257fe5b6020026020010151600001516040516102cb91906109dd565b908152602001604051809103902060008201518160000190805190602001906102f5929190610575565b506020820151600182810180546001600160a01b0319166001600160a01b0390931692909217909155604083015160028301556060909201516003909101550161023d565b5050565b6000546001600160a01b031633146103685760405162461bcd60e51b815260040161023190610a8c565b600080546001600160a01b0319166001600160a01b0383811691821780845560405192939116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60006001826040516103c891906109dd565b90815260405190819003602001902060018101549091506001600160a01b03166104045760405162461bcd60e51b815260040161023190610a9c565b3360009081526002602052604090819020905161044891906104279085906109dd565b9081526040519081900360200190205460028301549063ffffffff61054716565b42116104665760405162461bcd60e51b815260040161023190610a6c565b600060018360405161047891906109dd565b90815260405190819003602001812060010154600384015463a9059cbb60e01b83526001600160a01b039091169250829163a9059cbb916104be913391906004016109fe565b602060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610510919081019061081f565b50336000908152600260205260409081902090514291906105329086906109dd565b90815260405190819003602001902055505050565b60008282018381101561056c5760405162461bcd60e51b815260040161023190610a7c565b90505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105b657805160ff19168380011785556105e3565b828001600101855582156105e3579182015b828111156105e35782518255916020019190600101906105c8565b506105ef9291506105f3565b5090565b61060d91905b808211156105ef57600081556001016105f9565b90565b803561056f81610baf565b600082601f83011261062c57600080fd5b813561063f61063a82610ae1565b610aba565b81815260209384019390925082018360005b8381101561067d578135860161066788826106e1565b8452506020928301929190910190600101610651565b5050505092915050565b805161056f81610bc6565b600082601f8301126106a357600080fd5b81356106b161063a82610b02565b915080825260208301602083018583830111156106cd57600080fd5b6106d8838284610b69565b50505092915050565b6000608082840312156106f357600080fd5b6106fd6080610aba565b9050813567ffffffffffffffff81111561071657600080fd5b61072284828501610692565b825250602061073384848301610610565b602083015250604061074784828501610767565b604083015250606061075b84828501610767565b60608301525092915050565b803561056f81610bcf565b60006020828403121561078457600080fd5b60006107908484610610565b949350505050565b600080604083850312156107ab57600080fd5b60006107b78585610610565b925050602083013567ffffffffffffffff8111156107d457600080fd5b6107e085828601610692565b9150509250929050565b6000602082840312156107fc57600080fd5b813567ffffffffffffffff81111561081357600080fd5b6107908482850161061b565b60006020828403121561083157600080fd5b60006107908484610687565b60006020828403121561084f57600080fd5b813567ffffffffffffffff81111561086657600080fd5b61079084828501610692565b61087b81610b58565b82525050565b61087b81610b3c565b600061089582610b2a565b61089f8185610b37565b93506108af818560208601610b75565b9290920192915050565b60006108c482610b2a565b6108ce8185610b2e565b93506108de818560208601610b75565b6108e781610ba5565b9093019392505050565b60006108fe600f83610b2e565b6e494e56414c49445f4144445245535360881b815260200192915050565b6000610929600f83610b2e565b6e554e41424c455f544f5f434c41494d60881b815260200192915050565b6000610954601b83610b2e565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b600061098d600f83610b2e565b6e29b437bab6321031329037bbb732b960891b815260200192915050565b60006109b8600d83610b2e565b6c1253959053125117d054d4d155609a1b815260200192915050565b61087b8161060d565b60006109e9828461088a565b9392505050565b6020810161056f8284610881565b60408101610a0c8285610872565b6109e960208301846109d4565b60808082528101610a2a81876108b9565b9050610a396020830186610881565b610a4660408301856109d4565b610a5360608301846109d4565b95945050505050565b6020808252810161056f816108f1565b6020808252810161056f8161091c565b6020808252810161056f81610947565b6020808252810161056f81610980565b6020808252810161056f816109ab565b6020810161056f82846109d4565b60405181810167ffffffffffffffff81118282101715610ad957600080fd5b604052919050565b600067ffffffffffffffff821115610af857600080fd5b5060209081020190565b600067ffffffffffffffff821115610b1957600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b919050565b600061056f82610b4c565b151590565b6001600160a01b031690565b600061056f82600061056f82610b3c565b82818337506000910152565b60005b83811015610b90578181015183820152602001610b78565b83811115610b9f576000848401525b50505050565b601f01601f191690565b610bb881610b3c565b8114610bc357600080fd5b50565b610bb881610b47565b610bb88161060d56fea365627a7a72315820f89245d3c4676541fc4cd8b5e1f8fcb72115f1631b0ba8ab247f4dd35b563a8a6c6578706572696d656e74616cf564736f6c63430005100040";

type FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Faucet__factory extends ContractFactory {
  constructor(...args: FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Faucet> {
    return super.deploy(overrides || {}) as Promise<Faucet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Faucet {
    return super.attach(address) as Faucet;
  }
  override connect(signer: Signer): Faucet__factory {
    return super.connect(signer) as Faucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetInterface {
    return new utils.Interface(_abi) as FaucetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Faucet {
    return new Contract(address, _abi, signerOrProvider) as Faucet;
  }
}
