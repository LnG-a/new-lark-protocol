/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type {
  Tokenlock,
  TokenlockInterface,
} from "../../../contracts/Utils/Tokenlock";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "Freezed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "UnFreezed",
    type: "event",
  },
  {
    constant: false,
    inputs: [],
    name: "freeze",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "unfreeze",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600080546001600160a81b031916331790556102a4806100256000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806362a5af3b146100515780636a28f0001461005b5780638da5cb5b14610063578063f2fde38b14610087575b600080fd5b6100596100ad565b005b61005961013a565b61006b6101c1565b604080516001600160a01b039092168252519081900360200190f35b6100596004803603602081101561009d57600080fd5b50356001600160a01b03166101d0565b6000546001600160a01b031633146100fe576040805162461bcd60e51b815260206004820152600f60248201526e29b437bab6321031329037bbb732b960891b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1781556040517f962a6139ca22015759d0878e2cf5d770dcb8152e1d5ba08e46a969dd9b154a9c9190a1565b6000546001600160a01b0316331461018b576040805162461bcd60e51b815260206004820152600f60248201526e29b437bab6321031329037bbb732b960891b604482015290519081900360640190fd5b6000805460ff60a01b191681556040517ff0daac2271a735ea786b9adf80dfcbd6a3cbd52f3cab0a78337114692d5faf5d9190a1565b6000546001600160a01b031681565b6000546001600160a01b03163314610221576040805162461bcd60e51b815260206004820152600f60248201526e29b437bab6321031329037bbb732b960891b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383811691821780845560405192939116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35056fea265627a7a72315820bb8a559a2fc8f3a61fd20c6309d71451557970ab43a7f5d5b592c11ce8a9dac864736f6c63430005100032";

type TokenlockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenlockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Tokenlock__factory extends ContractFactory {
  constructor(...args: TokenlockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Tokenlock> {
    return super.deploy(overrides || {}) as Promise<Tokenlock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Tokenlock {
    return super.attach(address) as Tokenlock;
  }
  override connect(signer: Signer): Tokenlock__factory {
    return super.connect(signer) as Tokenlock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenlockInterface {
    return new utils.Interface(_abi) as TokenlockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Tokenlock {
    return new Contract(address, _abi, signerOrProvider) as Tokenlock;
  }
}
