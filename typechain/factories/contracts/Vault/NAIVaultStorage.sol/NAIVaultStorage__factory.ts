/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../common";
import type {
  NAIVaultStorage,
  NAIVaultStorageInterface,
} from "../../../../contracts/Vault/NAIVaultStorage.sol/NAIVaultStorage";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "accNWLPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "nai",
    outputs: [
      {
        internalType: "contract IBEP20",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "naiVaultImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "nwl",
    outputs: [
      {
        internalType: "contract IBEP20",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "nwlBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "pendingAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "pendingNAIVaultImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "pendingRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardDebt",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610212806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80635b0a8a07116100665780635b0a8a071461013057806364aa44db14610138578063eded3fda14610140578063f30f7c0514610148578063f851a440146101505761009e565b80630f9eab09146100a35780631959a002146100c757806323dc14d314610106578063267822471461010e5780633f4470da14610116575b600080fd5b6100ab610158565b604080516001600160a01b039092168252519081900360200190f35b6100ed600480360360208110156100dd57600080fd5b50356001600160a01b0316610167565b6040805192835260208301919091528051918290030190f35b6100ab610180565b6100ab61018f565b61011e61019e565b60408051918252519081900360200190f35b6100ab6101a4565b61011e6101b3565b61011e6101b9565b6100ab6101bf565b6100ab6101ce565b6003546001600160a01b031681565b6009602052600090815260409020805460019091015482565b6002546001600160a01b031681565b6001546001600160a01b031681565b60065481565b6005546001600160a01b031681565b60075481565b60085481565b6004546001600160a01b031681565b6000546001600160a01b03168156fea265627a7a723158205f5b9c31c4180f1dc3ec0dc55cda1eac18485ccbba713dc9a45df6ec28ec3dfc64736f6c63430005100032";

type NAIVaultStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NAIVaultStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NAIVaultStorage__factory extends ContractFactory {
  constructor(...args: NAIVaultStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NAIVaultStorage> {
    return super.deploy(overrides || {}) as Promise<NAIVaultStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NAIVaultStorage {
    return super.attach(address) as NAIVaultStorage;
  }
  override connect(signer: Signer): NAIVaultStorage__factory {
    return super.connect(signer) as NAIVaultStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NAIVaultStorageInterface {
    return new utils.Interface(_abi) as NAIVaultStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NAIVaultStorage {
    return new Contract(address, _abi, signerOrProvider) as NAIVaultStorage;
  }
}
