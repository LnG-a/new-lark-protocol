/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type {
  ComptrollerLens,
  ComptrollerLensInterface,
} from "../../../contracts/Lens/ComptrollerLens";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "error",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "info",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "detail",
        type: "uint256",
      },
    ],
    name: "Failure",
    type: "event",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract NToken",
        name: "nTokenModify",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "redeemTokens",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowAmount",
        type: "uint256",
      },
    ],
    name: "getHypotheticalAccountLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nTokenBorrowed",
        type: "address",
      },
      {
        internalType: "address",
        name: "nTokenCollateral",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "actualRepayAmount",
        type: "uint256",
      },
    ],
    name: "liquidateCalculateSeizeTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nTokenCollateral",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "actualRepayAmount",
        type: "uint256",
      },
    ],
    name: "liquidateNAICalculateSeizeTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506112ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301b991e9146100465780630ef332ca14610070578063a7032efb14610083575b600080fd5b610059610054366004610fa0565b6100a5565b60405161006792919061117c565b60405180910390f35b61005961007e366004610eca565b610333565b610096610091366004610f2b565b610663565b60405161006793929190611197565b6000806000670de0b6b3a764000090506000866001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f057600080fd5b505afa158015610104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101289190810190611065565b6001600160a01b031663fc57d4df876040518263ffffffff1660e01b8152600401610153919061115d565b60206040518083038186803b15801561016b57600080fd5b505afa15801561017f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a39190810190611083565b9050806101ba57600d93506000925061032b915050565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f557600080fd5b505afa158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061022d9190810190611083565b90506000610239610d8c565b610241610d8c565b610249610d8c565b6102dd60405180602001604052808e6001600160a01b0316634ada90af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102c89190810190611083565b90526040805160208101909152898152610b25565b9250610305604051806020016040528088815250604051806020016040528088815250610b25565b91506103118383610b66565b905061031d818b610ba2565b600099509750505050505050505b935093915050565b6000806000866001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561037157600080fd5b505afa158015610385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103a99190810190611065565b6001600160a01b031663fc57d4df876040518263ffffffff1660e01b81526004016103d4919061115d565b60206040518083038186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104249190810190611083565b90506000876001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561046157600080fd5b505afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104999190810190611065565b6001600160a01b031663fc57d4df876040518263ffffffff1660e01b81526004016104c4919061115d565b60206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105149190810190611083565b9050811580610521575080155b1561053657600d93506000925061065a915050565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105a99190810190611083565b905060006105b5610d8c565b6105bd610d8c565b6105c5610d8c565b61060c60405180602001604052808f6001600160a01b0316634ada90af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029057600080fd5b9250610634604051806020016040528088815250604051806020016040528088815250610b25565b91506106408383610b66565b905061064c818b610ba2565b600099509750505050505050505b94509492505050565b6000806000610670610d9f565b600060608a6001600160a01b031663abfceffc8b6040518263ffffffff1660e01b81526004016106a0919061114f565b60006040518083038186803b1580156106b857600080fd5b505afa1580156106cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f49190810190610fed565b805190915060005b81811015610a4f57600083828151811061071257fe5b60200260200101519050806001600160a01b031663c37f68e28e6040518263ffffffff1660e01b8152600401610748919061114f565b60806040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061079891908101906110a1565b60808a015260608901526040880152945084156107c657600f985060009750879650610b1a95505050505050565b60008e6001600160a01b0316638e8f294b836040518263ffffffff1660e01b81526004016107f4919061114f565b60606040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108449190810190611022565b509150506040518060200160405280828152508760c00181905250604051806020016040528088608001518152508760e001819052508e6001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b357600080fd5b505afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108eb9190810190611065565b6001600160a01b031663fc57d4df836040518263ffffffff1660e01b8152600401610916919061115d565b60206040518083038186803b15801561092e57600080fd5b505afa158015610942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109669190810190611083565b60a0880181905261098957600d995060009850889750610b1a9650505050505050565b604080516020810190915260a0880151815261010088015260c087015160e08801516109c3916109b891610b25565b886101000151610b25565b6101208801819052604088015188516109dd929190610bc9565b8752610100870151606088015160208901516109fa929190610bc9565b60208801526001600160a01b03828116908e161415610a4557610a278761012001518d8960200151610bc9565b60208801819052610100880151610a3f918d90610bc9565b60208801525b50506001016106fc565b50610ad984602001518d6001600160a01b031663f04a60c28e6040518263ffffffff1660e01b8152600401610a84919061114f565b60206040518083038186803b158015610a9c57600080fd5b505afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ad49190810190611083565b610bfc565b6020850181905284511115610b01575050506020810151905160009450039150829050610b1a565b5050815160209092015160009550859450919091039150505b955095509592505050565b610b2d610d8c565b6040518060200160405280670de0b6b3a7640000610b5386600001518660000151610c32565b81610b5a57fe5b04905290505b92915050565b610b6e610d8c565b6040518060200160405280610b99610b928660000151670de0b6b3a7640000610c32565b8551610c74565b90529392505050565b6000610bac610d8c565b610bb68484610ca7565b9050610bc181610cc8565b949350505050565b6000610bd3610d8c565b610bdd8585610ca7565b9050610bf1610beb82610cc8565b84610bfc565b9150505b9392505050565b6000610bf58383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250610cd7565b6000610bf583836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250610d10565b6000610bf583836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250610d58565b610caf610d8c565b6040518060200160405280610b99856000015185610c32565b51670de0b6b3a7640000900490565b60008383018285821015610d075760405162461bcd60e51b8152600401610cfe919061116b565b60405180910390fd5b50949350505050565b6000831580610d1d575082155b15610d2a57506000610bf5565b83830283858281610d3757fe5b04148390610d075760405162461bcd60e51b8152600401610cfe919061116b565b60008183610d795760405162461bcd60e51b8152600401610cfe919061116b565b50828481610d8357fe5b04949350505050565b6040518060200160405280600081525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001610ddd610d8c565b8152602001610dea610d8c565b8152602001610df7610d8c565b8152602001610e04610d8c565b905290565b8035610b6081611278565b600082601f830112610e2557600080fd5b8151610e38610e33826111e6565b6111bf565b91508181835260208401935060208101905083856020840282011115610e5d57600080fd5b60005b83811015610e895781610e738882610ea9565b8452506020928301929190910190600101610e60565b5050505092915050565b8051610b608161128f565b8035610b6081611298565b8051610b6081611298565b8035610b60816112a1565b8051610b60816112a1565b60008060008060808587031215610ee057600080fd5b6000610eec8787610e09565b9450506020610efd87828801610e09565b9350506040610f0e87828801610e09565b9250506060610f1f87828801610eb4565b91505092959194509250565b600080600080600060a08688031215610f4357600080fd5b6000610f4f8888610e09565b9550506020610f6088828901610e09565b9450506040610f7188828901610e9e565b9350506060610f8288828901610eb4565b9250506080610f9388828901610eb4565b9150509295509295909350565b600080600060608486031215610fb557600080fd5b6000610fc18686610e09565b9350506020610fd286828701610e09565b9250506040610fe386828701610eb4565b9150509250925092565b600060208284031215610fff57600080fd5b815167ffffffffffffffff81111561101657600080fd5b610bc184828501610e14565b60008060006060848603121561103757600080fd5b60006110438686610e93565b935050602061105486828701610ebf565b9250506040610fe386828701610e93565b60006020828403121561107757600080fd5b6000610bc18484610ea9565b60006020828403121561109557600080fd5b6000610bc18484610ebf565b600080600080608085870312156110b757600080fd5b60006110c38787610ebf565b94505060206110d487828801610ebf565b93505060406110e587828801610ebf565b9250506060610f1f87828801610ebf565b6110ff81611214565b82525050565b6110ff81611224565b600061111982611207565b611123818561120b565b935061113381856020860161123e565b61113c8161126e565b9093019392505050565b6110ff8161123b565b60208101610b6082846110f6565b60208101610b608284611105565b60208082528101610bf5818461110e565b6040810161118a8285611146565b610bf56020830184611146565b606081016111a58286611146565b6111b26020830185611146565b610bc16040830184611146565b60405181810167ffffffffffffffff811182821017156111de57600080fd5b604052919050565b600067ffffffffffffffff8211156111fd57600080fd5b5060209081020190565b5190565b90815260200190565b6000610b608261122f565b151590565b6000610b6082611214565b6001600160a01b031690565b90565b60005b83811015611259578181015183820152602001611241565b83811115611268576000848401525b50505050565b601f01601f191690565b61128181611214565b811461128c57600080fd5b50565b6112818161121f565b61128181611224565b6112818161123b56fea365627a7a72315820131ebd92a91ae33f84bd1c217e87f32efb64b489b48b88270c2b5460b16025e36c6578706572696d656e74616cf564736f6c63430005100040";

type ComptrollerLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ComptrollerLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ComptrollerLens__factory extends ContractFactory {
  constructor(...args: ComptrollerLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ComptrollerLens> {
    return super.deploy(overrides || {}) as Promise<ComptrollerLens>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ComptrollerLens {
    return super.attach(address) as ComptrollerLens;
  }
  override connect(signer: Signer): ComptrollerLens__factory {
    return super.connect(signer) as ComptrollerLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ComptrollerLensInterface {
    return new utils.Interface(_abi) as ComptrollerLensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ComptrollerLens {
    return new Contract(address, _abi, signerOrProvider) as ComptrollerLens;
  }
}
